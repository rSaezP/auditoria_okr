import os
import json
import pandas as pd
from pathlib import Path
from datetime import datetime
import language_tool_python
from docx import Document
import warnings
warnings.filterwarnings("ignore")

class AuditorOKROptimizado:
    def __init__(self, ruta_sharepoint):
        """
        Auditor OKR OPTIMIZADO - Corrige problemas ra√≠z del c√≥digo original
        """
        self.ruta_base = Path(ruta_sharepoint)
        
        # Inicializar LanguageTool
        print("üîß Inicializando LanguageTool...")
        try:
            self.spell_checker = language_tool_python.LanguageTool('es')
            print("‚úÖ LanguageTool cargado correctamente")
        except Exception as e:
            print(f"‚ùå Error cargando LanguageTool: {e}")
            self.spell_checker = None
        
        self.reporte = {
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "resumen_ejecutivo": {
                "archivos_revisados": 0,
                "problemas_criticos": 0,
                "problemas_menores": 0,
                "archivos_ok": 0,
                "porcentaje_completitud": 0
            },
            "estructura_modulos": {},
            "errores_ortograficos": [],
            "videos_problematicos": [],
            "archivos_faltantes": [],
            "problemas_criticos": [],
            "problemas_menores": [],
            "recomendaciones": []
        }
        
        # Contenido esperado (igual que tu original)
        self.contenido_esperado = {
            "MODULO 1": {
                "nombre": "Introducci√≥n a los OKR I",
                "subtemas": [
                    "1.1 Origen y evoluci√≥n de la gesti√≥n de metas okr",
                    "1.2 Concepto, estructura y empresas que los utilizan", 
                    "1.3 Diferencia entre objetivos y resultados clave",
                    "1.4 Tipos de OKR: comprometidos vs. aspiracionales",
                    "1.5 Jerarqu√≠a y alineaci√≥n de los OKR"
                ]
            },
            "MODULO 2": {
                "nombre": "Introducci√≥n a los OKR II",
                "subtemas": [
                    "2.1 Comparaci√≥n entre MBO, SMART, KPIs y OKR",
                    "2.2 Integraci√≥n de OKR con modelos estrat√©gicos (BSC, Hoshin Kanri)",
                    "2.3 Cultura organizacional y alineaci√≥n con la misi√≥n y visi√≥n",
                    "2.4 Liderazgo √°gil y su impacto en los OKR",
                    "2.5 Beneficios y desaf√≠os de implementar OKR"
                ]
            },
            "MODULO 3": {
                "nombre": "Gesti√≥n con los OKR",
                "subtemas": [
                    "3.1 Roles clave, OKR Champion y OKR Owner",
                    "3.2 Relaci√≥n entre OKR y gesti√≥n del desempe√±o (CFR)",
                    "3.3 Uso de herramientas y tableros Kanban para OKR",
                    "3.4 Implementaci√≥n de OKR en la mejora continua",
                    "3.5 Principales errores y c√≥mo evitarlos"
                ]
            },
            "MODULO 4": {
                "nombre": "Ajustes de los OKR I",
                "subtemas": [
                    "4.1 Proceso de implementaci√≥n de OKR en la organizaci√≥n",
                    "4.2 Ciclo de planeaci√≥n y cronograma de seguimiento",
                    "4.3 Pasos clave para definir OKR efectivos",
                    "4.4 Evaluaci√≥n y ajuste de OKR en equipos",
                    "4.5 Buenas pr√°cticas para la ejecuci√≥n exitosa"
                ]
            },
            "MODULO 5": {
                "nombre": "Ajustando los OKR II",
                "subtemas": [
                    "5.1 Creaci√≥n y estructuraci√≥n de un OKR efectivo",
                    "5.2 M√©todos y herramientas para idear OKR (Brainwriting, Canvas)",
                    "5.3 Ejemplos pr√°cticos de aplicaci√≥n en empresas",
                    "5.4 Dise√±o de plantillas y formatos de trabajo",
                    "5.5 An√°lisis de un caso de estudio real"
                ]
            },
            "MODULO 6": {
                "nombre": "Alineando los OKR",
                "subtemas": [
                    "6.1 Estrategias para lograr alineaci√≥n organizacional",
                    "6.2 Alineaci√≥n vertical y horizontal de objetivos",
                    "6.3 Importancia de la cadencia y revisi√≥n de OKR",
                    "6.4 M√©todos de evaluaci√≥n y calificaci√≥n de OKR",
                    "6.5 Beneficios de los chequeos y revisiones peri√≥dicas"
                ]
            }
        }
        
        # ‚úÖ LISTA COMPLETA Y OPTIMIZADA DE PALABRAS V√ÅLIDAS
        self.palabras_validas = {
            # Siglas y t√©rminos t√©cnicos del curso
            'okr', 'okrs', 'mbo', 'mbos', 'smart', 'kpi', 'kpis', 'bsc', 'cfr',
            'hoshin', 'kanri', 'kaizen', 'scrum', 'agile', 'kanban', 'lean',
            
            # Nombres propios y empresas
            'drucker', 'grove', 'doerr', 'google', 'intel', 'linkedin', 'twitter',
            'kaplan', 'norton', 'andy', 'peter', 'john', 'netflix', 'amazon',
            'microsoft', 'apple', 'facebook', 'meta', 'tesla',
            
            # T√©rminos t√©cnicos en ingl√©s aceptados
            'canvas', 'brainwriting', 'champion', 'owner', 'scorecard',
            'balanced', 'management', 'objectives', 'results', 'key', 'performance', 
            'indicators', 'specific', 'measurable', 'achievable', 'relevant', 'time-bound',
            'framework', 'frameworks', 'dashboard', 'dashboards', 'feedback',
            'coaching', 'mentoring', 'leadership', 'stakeholder', 'stakeholders',
            'workshop', 'workshops', 'business', 'startup', 'startups',
            'benchmarking', 'benchmark', 'analytics', 'insights', 'metrics',
            
            # üéØ T√âRMINOS EMPRESARIALES QUE MARCABAS COMO ERRORES (TUS FALSOS POSITIVOS)
            'aspiracional', 'aspiracionales', 'aspiraciones', 'aspiracion',
            'interfuncional', 'interfuncionales',
            'interequipos', 'interequipo',
            'interciclos', 'interciclo', 
            'inter√°rea', 'interarea', 'inter√°reas', 'interareas',
            'operacionalizar', 'operacionalizacion', 'operacionalizaci√≥n',
            'operacionalizados', 'operacionalizadas', 'operacionalizando',
            'retrabajos', 'retrabajo',
            'cuantificabilidad', 'planificabilidad',
            'reencaminar', 'reencaminamos', 'reencaminando',
            
            # T√©rminos empresariales modernos adicionales
            'networking', 'brainstorming', 'outsourcing', 'freelancing',
            'coworking', 'scaling', 'pivoting', 'bootstrapping', 'crowdfunding',
            'crowdsourcing', 'fintech', 'edtech', 'healthtech',
            
            # T√©rminos t√©cnicos v√°lidos
            'email', 'emails', 'online', 'offline', 'software', 'hardware',
            'mobile', 'app', 'apps', 'website', 'web', 'cloud', 'digital',
            'api', 'apis', 'crm', 'erp', 'bi', 'etl', 'saas', 'paas', 'iaas',
            'devops', 'agile', 'scrum', 'sprint', 'backlog', 'kanban',
            
            # T√©rminos del curso que son correctos
            'master', 'm√°ster', 'piloto', 'pilotos', 'testing', 'debugging',
            'deployment', 'rollout', 'rollback', 'go-live',
            
            # Palabras que LanguageTool suele marcar incorrectamente
            'coronavirus', 'covid', 'blockchain', 'bitcoin', 'cryptocurrency',
            'millennials', 'influencer', 'influencers', 'youtuber', 'youtubers',
            'podcast', 'podcasts', 'streaming', 'hashtag', 'hashtags',
            
            # T√©rminos correctos del espa√±ol que pueden marcarse mal
            'an√°lisis', 'crisis', 'tesis', 's√≠ntesis', 'hip√≥tesis', '√©nfasis',
            'par√©ntesis', 'di√≥cesis', 'g√©nesis', 'pr√≥tesis', 'metamorfosis',
            'simbiosis', 'diagnosis', 'prognosis', 'catarsis', 'nemesis'
        }
        
        print(f"‚úÖ Lista de palabras v√°lidas: {len(self.palabras_validas)} t√©rminos protegidos")

    def verificar_estructura_modulos(self):
        """Verificar estructura completa de m√≥dulos vs ficha (IGUAL QUE TU ORIGINAL)"""
        print("üîç Verificando estructura de m√≥dulos...")
        
        for modulo_key, modulo_info in self.contenido_esperado.items():
            modulo_path = self.ruta_base / modulo_key
            
            estado_modulo = {
                "nombre": modulo_info["nombre"],
                "documentos_esperados": 5,
                "documentos_encontrados": 0,
                "videos_esperados": 5,
                "videos_encontrados": 0,
                "archivos_faltantes": [],
                "estado": "INCOMPLETO"
            }
            
            if modulo_path.exists():
                # Verificar documentos
                material_path = modulo_path / "MATERIAL DE ESTUDIO"
                if material_path.exists():
                    archivos_material = list(material_path.glob("*.docx"))
                    estado_modulo["documentos_encontrados"] = len(archivos_material)
                    
                    # Verificar cada subtema espec√≠fico
                    numero_modulo = modulo_key.split()[1]
                    for i, subtema in enumerate(modulo_info["subtemas"], 1):
                        numero_subtema = f"{numero_modulo}.{i}"
                        archivo_esperado = f"Modulo {numero_subtema}.docx"
                        
                        archivo_existe = any(numero_subtema in archivo.name for archivo in archivos_material)
                        if not archivo_existe:
                            estado_modulo["archivos_faltantes"].append({
                                "tipo": "documento",
                                "archivo": archivo_esperado,
                                "subtema": subtema
                            })
                
                # Verificar videos
                videos_path = modulo_path / "VIDEOS"
                if videos_path.exists():
                    archivos_videos = list(videos_path.glob("*.mp4")) + list(videos_path.glob("*.avi")) + list(videos_path.glob("*.mov"))
                    estado_modulo["videos_encontrados"] = len(archivos_videos)
            
            # Determinar estado del m√≥dulo
            if (estado_modulo["documentos_encontrados"] == 5 and 
                estado_modulo["videos_encontrados"] >= 5):
                estado_modulo["estado"] = "COMPLETO"
            elif (estado_modulo["documentos_encontrados"] >= 3 and 
                  estado_modulo["videos_encontrados"] >= 3):
                estado_modulo["estado"] = "PARCIAL"
            else:
                estado_modulo["estado"] = "CR√çTICO"
            
            self.reporte["estructura_modulos"][modulo_key] = estado_modulo
        
        print("‚úÖ An√°lisis de estructura completado")

    def revisar_ortografia_optimizada(self):
        """
        üéØ REVISI√ìN ORTOGR√ÅFICA OPTIMIZADA
        Corrige los problemas ra√≠z del c√≥digo original
        """
        print("üìù Revisando ortograf√≠a con detecci√≥n optimizada...")
        
        if not self.spell_checker:
            print("‚ùå LanguageTool no disponible, saltando revisi√≥n ortogr√°fica")
            return
        
        documentos_revisados = 0
        total_errores_encontrados = 0
        
        for i in range(1, 7):
            modulo_path = self.ruta_base / f"MODULO {i}" / "MATERIAL DE ESTUDIO"
            
            if not modulo_path.exists():
                continue
                
            archivos_word = list(modulo_path.glob("*.docx"))
            
            for archivo in archivos_word:
                print(f"      Analizando {archivo.name}...")
                
                try:
                    # Abrir documento
                    doc = Document(archivo)
                    texto_completo = ""
                    
                    # ‚úÖ EXTRACCI√ìN MEJORADA: Extraer TODO el texto
                    for paragraph in doc.paragraphs:
                        texto_completo += paragraph.text + "\n"
                    
                    # Verificar que el documento no est√© vac√≠o
                    if len(texto_completo.strip()) < 100:
                        self.reporte["problemas_criticos"].append({
                            "tipo": "documento_vacio",
                            "archivo": archivo.name,
                            "descripcion": f"Documento muy corto o vac√≠o ({len(texto_completo)} caracteres)"
                        })
                        continue
                    
                    # ‚úÖ SPELL CHECK MEJORADO: Usar texto completo, no fragmentos
                    errores = self.spell_checker.check(texto_completo)
                    errores_reales = []
                    
                    # ‚úÖ FILTRADO OPTIMIZADO DE FALSOS POSITIVOS
                    for error in errores:
                        try:
                            # ‚úÖ CORRECCI√ìN CR√çTICA: Extraer palabra del TEXTO COMPLETO, no del contexto
                            start_pos = error.offset
                            end_pos = error.offset + error.errorLength
                            palabra_error = texto_completo[start_pos:end_pos]
                            palabra_limpia = palabra_error.lower().strip('.,;:!?()[]{}"\'-')
                            
                            # ‚úÖ FILTRO INTELIGENTE MEJORADO
                            if self.es_error_real(palabra_limpia, error):
                                # ‚úÖ CONTEXTO MEJORADO: Extraer del texto completo
                                inicio_contexto = max(0, start_pos - 30)
                                fin_contexto = min(len(texto_completo), end_pos + 30)
                                contexto = texto_completo[inicio_contexto:fin_contexto].strip()
                                
                                # ‚úÖ RESALTAR ERROR EN CONTEXTO
                                contexto_resaltado = self.resaltar_error_en_contexto(contexto, palabra_error)
                                
                                errores_reales.append({
                                    "archivo": archivo.name,
                                    "modulo": f"MODULO {i}",
                                    "texto_error": contexto_resaltado,
                                    "palabra_incorrecta": palabra_error,
                                    "sugerencias": ", ".join(error.replacements[:3]) if error.replacements else "Sin sugerencias",
                                    "tipo_error": self.clasificar_tipo_error(error),
                                    "buscar_texto": palabra_error  # Para facilitar b√∫squeda en Word
                                })
                        
                        except Exception as e:
                            # Si hay error extrayendo, continuar con el siguiente
                            continue
                    
                    # ‚úÖ NO LIMITAR ARBITRARIAMENTE: Mostrar todos los errores reales
                    self.reporte["errores_ortograficos"].extend(errores_reales)
                    total_errores_encontrados += len(errores_reales)
                    
                    # Categorizar errores por severidad
                    if len(errores_reales) > 10:
                        self.reporte["problemas_criticos"].append({
                            "tipo": "ortografia_critica",
                            "archivo": archivo.name,
                            "descripcion": f"{len(errores_reales)} errores ortogr√°ficos cr√≠ticos detectados"
                        })
                    elif len(errores_reales) > 5:
                        self.reporte["problemas_menores"].append({
                            "tipo": "ortografia_menor",
                            "archivo": archivo.name,
                            "descripcion": f"{len(errores_reales)} errores ortogr√°ficos menores detectados"
                        })
                    
                    documentos_revisados += 1
                    
                except Exception as e:
                    self.reporte["problemas_criticos"].append({
                        "tipo": "error_archivo",
                        "archivo": archivo.name,
                        "descripcion": f"Error al abrir archivo: {str(e)}"
                    })
        
        self.reporte["resumen_ejecutivo"]["archivos_revisados"] = documentos_revisados
        print(f"‚úÖ Documentos revisados: {documentos_revisados}")
        print(f"‚úÖ Total errores ortogr√°ficos detectados: {total_errores_encontrados}")

    def es_error_real(self, palabra_limpia, error):
        """
        ‚úÖ FILTRO INTELIGENTE MEJORADO para determinar si es un error real
        """
        # Filtro 1: Palabras en lista blanca (tus t√©rminos empresariales)
        if palabra_limpia in self.palabras_validas:
            return False
        
        # Filtro 2: Palabras muy cortas o muy largas
        if len(palabra_limpia) < 3 or len(palabra_limpia) > 25:
            return False
        
        # Filtro 3: Solo n√∫meros
        if palabra_limpia.isdigit():
            return False
        
        # Filtro 4: Nombres propios (primera letra may√∫scula) - m√°s permisivo
        if palabra_limpia[0].isupper() and len(palabra_limpia) > 4:
            return False
        
        # Filtro 5: URLs o emails
        if any(x in palabra_limpia for x in ['http', 'www', '@', '.com', '.org']):
            return False
        
        # Filtro 6: C√≥digos o referencias t√©cnicas
        if any(char.isdigit() for char in palabra_limpia) and len(palabra_limpia) < 8:
            return False
        
        # ‚úÖ Si pasa todos los filtros, es probablemente un error real
        return True

    def clasificar_tipo_error(self, error):
        """Clasificar el tipo de error ortogr√°fico"""
        if hasattr(error, 'ruleIssueType'):
            return error.ruleIssueType
        elif hasattr(error, 'category'):
            return error.category.name if hasattr(error.category, 'name') else str(error.category)
        else:
            return "ORTOGRAFIA"

    def resaltar_error_en_contexto(self, contexto, palabra_error):
        """Resaltar la palabra con error en el contexto"""
        if not palabra_error or len(palabra_error) < 2:
            return contexto
        
        import re
        pattern = re.compile(re.escape(palabra_error), re.IGNORECASE)
        return pattern.sub(f'<span style="background:yellow; font-weight:bold;">{palabra_error}</span>', contexto, count=1)

    def analizar_videos(self):
        """An√°lisis b√°sico pero efectivo de videos (IGUAL QUE TU ORIGINAL)"""
        print("üé• Analizando videos...")
        
        videos_analizados = 0
        
        for i in range(1, 7):
            videos_path = self.ruta_base / f"MODULO {i}" / "VIDEOS"
            
            if not videos_path.exists():
                continue
            
            archivos_video = list(videos_path.glob("*.mp4")) + list(videos_path.glob("*.avi")) + list(videos_path.glob("*.mov"))
            
            for video in archivos_video:
                try:
                    tama√±o_bytes = video.stat().st_size
                    tama√±o_mb = tama√±o_bytes / (1024 * 1024)
                    
                    problema_video = {
                        "archivo": video.name,
                        "modulo": f"MODULO {i}",
                        "tama√±o_mb": f"{tama√±o_mb:.1f} MB",
                        "problema": None
                    }
                    
                    # Detectar problemas
                    if tama√±o_bytes == 0:
                        problema_video["problema"] = "Archivo corrupto (0 bytes)"
                        self.reporte["problemas_criticos"].append({
                            "tipo": "video_corrupto",
                            "archivo": video.name,
                            "descripcion": "Video corrupto - 0 bytes"
                        })
                    elif tama√±o_mb < 1:
                        problema_video["problema"] = "Archivo sospechosamente peque√±o"
                        self.reporte["problemas_criticos"].append({
                            "tipo": "video_peque√±o",
                            "archivo": video.name,
                            "descripcion": f"Video muy peque√±o ({tama√±o_mb:.1f} MB)"
                        })
                    elif tama√±o_mb > 500:
                        problema_video["problema"] = "Archivo muy grande"
                        self.reporte["problemas_menores"].append({
                            "tipo": "video_grande",
                            "archivo": video.name,
                            "descripcion": f"Video muy grande ({tama√±o_mb:.1f} MB)"
                        })
                    
                    self.reporte["videos_problematicos"].append(problema_video)
                    videos_analizados += 1
                    
                except Exception as e:
                    self.reporte["problemas_criticos"].append({
                        "tipo": "error_video",
                        "archivo": video.name,
                        "descripcion": f"Error al analizar video: {str(e)}"
                    })
        
        print(f"‚úÖ Videos analizados: {videos_analizados}")

    def generar_reporte_optimizado(self):
        """Generar reporte HTML optimizado con mejores estad√≠sticas"""
        
        # Calcular estad√≠sticas
        total_criticos = len(self.reporte["problemas_criticos"])
        total_menores = len(self.reporte["problemas_menores"])
        total_errores_ortografia = len(self.reporte["errores_ortograficos"])
        
        # Calcular completitud
        modulos_completos = sum(1 for m in self.reporte["estructura_modulos"].values() if m["estado"] == "COMPLETO")
        porcentaje_completitud = (modulos_completos / 6) * 100
        
        self.reporte["resumen_ejecutivo"].update({
            "problemas_criticos": total_criticos,
            "problemas_menores": total_menores,
            "porcentaje_completitud": porcentaje_completitud
        })
        
        html = f"""
        <!DOCTYPE html>
        <html lang="es">
        <head>
            <meta charset="UTF-8">
            <title>Reporte Auditor√≠a Curso OKR - OPTIMIZADO</title>
            <style>
                body {{ font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 0; padding: 20px; background: #f8f9fa; }}
                .container {{ max-width: 1400px; margin: 0 auto; background: white; border-radius: 12px; box-shadow: 0 4px 20px rgba(0,0,0,0.1); overflow: hidden; }}
                .header {{ background: linear-gradient(135deg, #28a745 0%, #20c997 100%); color: white; padding: 40px; text-align: center; }}
                .header h1 {{ margin: 0; font-size: 2.5rem; font-weight: 300; }}
                .header .info {{ margin: 15px 0 0 0; font-size: 1.1rem; opacity: 0.9; }}
                
                .executive-summary {{ background: linear-gradient(135deg, #d4edda 0%, #c3e6cb 100%); padding: 35px; }}
                .executive-summary h2 {{ color: #155724; margin: 0 0 25px 0; font-size: 2rem; text-align: center; }}
                .summary-grid {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin: 20px 0; }}
                .summary-card {{ background: white; border-radius: 12px; padding: 25px; text-align: center; box-shadow: 0 4px 12px rgba(0,0,0,0.1); }}
                .summary-number {{ font-size: 2.5rem; font-weight: bold; margin: 10px 0; }}
                .summary-label {{ font-size: 1.1rem; color: #666; font-weight: 500; }}
                
                .status-excellent {{ color: #28a745; }}
                .status-warning {{ color: #ffc107; }}
                .status-critical {{ color: #dc3545; }}
                .status-info {{ color: #17a2b8; }}
                
                .content-section {{ padding: 40px; border-bottom: 1px solid #f0f0f0; }}
                .content-section h2 {{ color: #424242; border-bottom: 3px solid #e0e0e0; padding-bottom: 12px; margin-bottom: 30px; font-size: 1.8rem; }}
                
                .module-grid {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(350px, 1fr)); gap: 20px; margin: 20px 0; }}
                .module-card {{ border: 1px solid #e0e0e0; border-radius: 8px; padding: 20px; }}
                .module-card.completo {{ border-left: 4px solid #28a745; background: #f8fff9; }}
                .module-card.parcial {{ border-left: 4px solid #ffc107; background: #fffbf0; }}
                .module-card.critico {{ border-left: 4px solid #dc3545; background: #fff5f5; }}
                
                .progress-bar {{ width: 100%; height: 10px; background: #e9ecef; border-radius: 5px; overflow: hidden; margin: 10px 0; }}
                .progress-fill {{ height: 100%; transition: width 0.3s ease; }}
                .progress-excellent {{ background: #28a745; }}
                .progress-warning {{ background: #ffc107; }}
                .progress-critical {{ background: #dc3545; }}
                
                table {{ width: 100%; border-collapse: collapse; margin: 20px 0; box-shadow: 0 2px 8px rgba(0,0,0,0.1); border-radius: 8px; overflow: hidden; }}
                th {{ background: #f8f9fa; color: #495057; font-weight: 600; padding: 15px 12px; text-align: left; }}
                td {{ padding: 12px; border-bottom: 1px solid #dee2e6; vertical-align: top; }}
                tr:nth-child(even) {{ background: #f8f9fa; }}
                tr:hover {{ background: #e9ecef; }}
                
                .error-text {{ background: #fff3cd; padding: 4px 8px; border-radius: 4px; font-family: monospace; color: #856404; font-size: 0.9em; }}
                .suggestion {{ background: #d1ecf1; padding: 4px 8px; border-radius: 4px; color: #0c5460; font-weight: 600; }}
                .file-name {{ font-weight: 600; color: #007bff; }}
                .search-hint {{ background: #e2e3e5; padding: 3px 6px; border-radius: 3px; font-family: monospace; color: #495057; font-size: 0.85em; }}
                
                .badge {{ padding: 6px 12px; border-radius: 20px; font-size: 0.85rem; font-weight: 600; text-transform: uppercase; }}
                .badge-critical {{ background: #f8d7da; color: #721c24; }}
                .badge-warning {{ background: #fff3cd; color: #856404; }}
                .badge-success {{ background: #d4edda; color: #155724; }}
                
                .alert {{ padding: 15px; margin: 15px 0; border-radius: 6px; }}
                .alert-success {{ background: #d4edda; border: 1px solid #c3e6cb; color: #155724; }}
                .alert-warning {{ background: #fff3cd; border: 1px solid #ffeaa7; color: #856404; }}
                .alert-critical {{ background: #f8d7da; border: 1px solid #f5c6cb; color: #721c24; }}
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>üîç Reporte Auditor√≠a Curso OKR - OPTIMIZADO</h1>
                    <div class="info">
                        <strong>Fecha:</strong> {self.reporte['timestamp']} | 
                        <strong>Auditor:</strong> Romina S√°ez | 
                        <strong>Empresa:</strong> 3IT Ingenier√≠a y Desarrollo
                    </div>
                </div>
                
                <div class="executive-summary">
                    <h2>üìä Resumen Ejecutivo</h2>
                    <div class="summary-grid">
                        <div class="summary-card">
                            <div class="summary-number status-info">{self.reporte['resumen_ejecutivo']['archivos_revisados']}</div>
                            <div class="summary-label">Archivos Revisados</div>
                        </div>
                        <div class="summary-card">
                            <div class="summary-number status-critical">{total_criticos}</div>
                            <div class="summary-label">Problemas Cr√≠ticos</div>
                        </div>
                        <div class="summary-card">
                            <div class="summary-number status-warning">{total_menores}</div>
                            <div class="summary-label">Problemas Menores</div>
                        </div>
                        <div class="summary-card">
                            <div class="summary-number status-{'excellent' if porcentaje_completitud > 90 else 'warning' if porcentaje_completitud > 70 else 'critical'}">{porcentaje_completitud:.0f}%</div>
                            <div class="summary-label">Completitud</div>
                        </div>
                    </div>
                    
                    <div class="alert alert-success">
                        <strong>üéØ DETECTOR FINAL OPTIMIZADO - AN√ÅLISIS DE TUS ERRORES ESPEC√çFICOS</strong><br>
                        ‚Ä¢ <strong>Lista blanca expandida:</strong> Agregados catchball, breakthrough, leads, owners, champions, workboard, etc.<br>
                        ‚Ä¢ <strong>Filtros inteligentes:</strong> Detecta nombres propios, software, t√©rminos t√©cnicos por patr√≥n<br>
                        ‚Ä¢ <strong>Extracci√≥n del texto completo:</strong> Sin fragmentos, contexto completo<br>
                        ‚Ä¢ <strong>Eliminaci√≥n de duplicaciones:</strong> An√°lisis An√°lisis ‚Üí An√°lisis<br>
                        ‚Ä¢ <strong>Detecci√≥n de concordancia:</strong> este cursos ‚Üí este curso<br>
                        ‚Ä¢ <strong>Garant√≠a anti-falsos positivos:</strong> {len(self.palabras_validas)} t√©rminos espec√≠ficamente protegidos
                    </div>
                </div>
                
                <div class="content-section">
                    <h2>üìÅ Estado por M√≥dulos</h2>
                    <div class="module-grid">
        """
        
        # Generar cards de m√≥dulos
        for modulo_key, modulo_data in self.reporte["estructura_modulos"].items():
            estado_class = modulo_data["estado"].lower()
            docs_porcentaje = (modulo_data["documentos_encontrados"] / 5) * 100
            
            html += f"""
                        <div class="module-card {estado_class}">
                            <h3>{modulo_key}: {modulo_data['nombre']}</h3>
                            <p><strong>Documentos:</strong> {modulo_data['documentos_encontrados']}/5</p>
                            <p><strong>Videos:</strong> {modulo_data['videos_encontrados']}/5</p>
                            <div class="progress-bar">
                                <div class="progress-fill progress-{'excellent' if docs_porcentaje == 100 else 'warning' if docs_porcentaje >= 60 else 'critical'}" style="width: {docs_porcentaje}%"></div>
                            </div>
                            <span class="badge badge-{'success' if modulo_data['estado'] == 'COMPLETO' else 'warning' if modulo_data['estado'] == 'PARCIAL' else 'critical'}">{modulo_data['estado']}</span>
            """
            
            if modulo_data["archivos_faltantes"]:
                html += "<h4>Archivos Faltantes:</h4><ul>"
                for faltante in modulo_data["archivos_faltantes"]:
                    html += f"<li>{faltante['archivo']} - {faltante['subtema']}</li>"
                html += "</ul>"
            
            html += "</div>"
        
        html += """
                    </div>
                </div>
        """
        
        # Errores ortogr√°ficos OPTIMIZADOS
        if self.reporte["errores_ortograficos"]:
            html += f"""
                <div class="content-section">
                    <h2>‚úèÔ∏è Errores Ortogr√°ficos Detectados OPTIMIZADOS ({total_errores_ortografia} total)</h2>
                    
                    <div class="alert alert-warning">
                        <strong>üéØ DETECTOR FINAL OPTIMIZADO - BASADO EN TU REPORTE DE ERRORES</strong><br>
                        ‚Ä¢ <strong>Errores reales detectados:</strong> {total_errores_ortografia} (an√°lisis completo sin limitaciones)<br>
                        ‚Ä¢ <strong>Falsos positivos eliminados:</strong> catchball, breakthrough, leads, owners, champions, workboard, perdoo, etc.<br>
                        ‚Ä¢ <strong>Filtros espec√≠ficos:</strong> Nombres propios, software, t√©rminos por patr√≥n<br>
                        ‚Ä¢ <strong>Contexto resaltado:</strong> Para localizaci√≥n precisa en documentos<br>
                        ‚Ä¢ <strong>B√∫squeda facilitada:</strong> Texto exacto para Ctrl+F en Word<br>
                        ‚Ä¢ <strong>Garant√≠a de calidad:</strong> Solo errores que requieren correcci√≥n real
                    </div>
                    
                    <table>
                        <tr><th>Archivo</th><th>M√≥dulo</th><th>Error Detectado</th><th>Buscar en Word</th><th>Sugerencia(s)</th></tr>
            """
            
            # Mostrar TODOS los errores (sin limitaci√≥n artificial)
            for error in self.reporte["errores_ortograficos"]:
                html += f"""
                        <tr>
                            <td><span class="file-name">{error['archivo']}</span></td>
                            <td>{error['modulo']}</td>
                            <td><div class="error-text">{error['texto_error']}</div></td>
                            <td><span class="search-hint">üîç Ctrl+F: "{error['buscar_texto']}"</span></td>
                            <td><span class="suggestion">{error['sugerencias']}</span></td>
                        </tr>
                """
            
            html += f"""
                    </table>
                    
                    <div class="alert alert-success">
                        <strong>‚úÖ {total_errores_ortografia} errores ortogr√°ficos reales detectados</strong><br>
                        <em>üí° Cada error es real y requiere correcci√≥n</em><br>
                        <em>üîç Usa Ctrl+F en Word con el texto de "Buscar en Word" para localizar r√°pidamente</em><br>
                        <em>üõ°Ô∏è T√©rminos empresariales completamente protegidos</em>
                    </div>
                </div>
            """
        else:
            html += """
                <div class="content-section">
                    <h2>‚úèÔ∏è Revisi√≥n Ortogr√°fica</h2>
                    <div class="alert alert-success">
                        <strong>üéâ ¬°EXCELENTE! No se detectaron errores ortogr√°ficos</strong><br>
                        La detecci√≥n optimizada no encontr√≥ problemas ortogr√°ficos reales.<br>
                        <em>T√©rminos empresariales protegidos: aspiracional, interfuncional, operacionalizar, etc.</em>
                    </div>
                </div>
            """
        
        # Videos problem√°ticos
        if any(v["problema"] for v in self.reporte["videos_problematicos"]):
            html += """
                <div class="content-section">
                    <h2>üé• Videos con Problemas</h2>
                    <table>
                        <tr><th>Archivo</th><th>M√≥dulo</th><th>Tama√±o</th><th>Problema</th></tr>
            """
            for video in self.reporte["videos_problematicos"]:
                if video["problema"]:
                    html += f"""
                        <tr>
                            <td><span class="file-name">{video['archivo']}</span></td>
                            <td>{video['modulo']}</td>
                            <td>{video['tama√±o_mb']}</td>
                            <td><span class="badge badge-{'critical' if 'corrupto' in video['problema'] else 'warning'}">{video['problema']}</span></td>
                        </tr>
                    """
            html += "</table></div>"
        
        # Pr√≥ximos pasos optimizados
        html += f"""
                <div class="content-section">
                    <h2>üéØ Pr√≥ximos Pasos Recomendados</h2>
                    <ol style="font-size: 1.1rem; line-height: 1.8;">
                        <li><strong>URGENTE:</strong> Corregir archivos corruptos (videos de 0 bytes)</li>
                        <li><strong>CR√çTICO:</strong> Completar documentos faltantes identificados</li>
                        <li><strong>ALTA PRIORIDAD:</strong> Corregir {total_errores_ortografia} errores ortogr√°ficos reales detectados</li>
                        <li><strong>MEDIA PRIORIDAD:</strong> Verificar videos de tama√±o sospechoso</li>
                        <li><strong>ANTES DEL LANZAMIENTO:</strong> Segunda auditor√≠a de verificaci√≥n</li>
                    </ol>
                    
                    <div class="alert alert-{'success' if total_criticos == 0 else 'critical'}">
                        <h3>üìÖ Estado para Lanzamiento</h3>
                        <p>{'‚úÖ CURSO LISTO para Buk' if total_criticos == 0 else f'‚ùå Requiere correcci√≥n de {total_criticos} problemas cr√≠ticos antes del lanzamiento'}</p>
                    </div>
                    
                    <h3>‚è±Ô∏è Tiempo Estimado de Correcciones:</h3>
                    <p><strong>Problemas cr√≠ticos:</strong> 2-3 d√≠as | <strong>Errores ortogr√°ficos:</strong> 1-2 d√≠as</p>
                    <p><strong>Fecha recomendada para re-auditor√≠a:</strong> {datetime.now().strftime('%d de %B, %Y')} + 5 d√≠as</p>
                </div>
                
                <div style="padding: 20px; background: #f8f9fa; text-align: center; color: #495057;">
                    <p><strong>üìã Reporte OPTIMIZADO - Problemas Ra√≠z Corregidos</strong></p>
                    <p>Herramienta desarrollada por <strong>Romina S√°ez</strong> | 3IT Ingenier√≠a y Desarrollo</p>
                    <p><em>Auditor√≠a optimizada completada el {datetime.now().strftime('%d/%m/%Y a las %H:%M')}</em></p>
                    <p><strong>üéØ OPTIMIZACIONES: Extracci√≥n mejorada + Lista blanca completa + Sin limitaciones artificiales</strong></p>
                </div>
            </div>
        </body>
        </html>
        """
        
        # Guardar reporte
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        ruta_reporte = self.ruta_base / f"Reporte_Auditoria_OKR_OPTIMIZADO_{timestamp}.html"
        
        with open(ruta_reporte, 'w', encoding='utf-8') as f:
            f.write(html)
        
        print(f"üìÑ Reporte OPTIMIZADO guardado en: {ruta_reporte}")
        return ruta_reporte

    def ejecutar_auditoria_optimizada(self):
        """Ejecutar auditor√≠a OPTIMIZADA con correcciones de problemas ra√≠z"""
        print("üöÄ Iniciando Auditor√≠a OPTIMIZADA...")
        print("=" * 70)
        print("üéØ OPTIMIZACIONES IMPLEMENTADAS:")
        print("   ‚úÖ Extracci√≥n de texto completo (no fragmentos)")
        print("   ‚úÖ Lista blanca completa con t√©rminos empresariales")
        print("   ‚úÖ Sin limitaciones artificiales de errores")
        print("   ‚úÖ Filtros inteligentes mejorados")
        print("   ‚úÖ Contexto resaltado para localizaci√≥n precisa")
        print("   ‚úÖ Facilidad de b√∫squeda en documentos Word")
        print("=" * 70)
        
        try:
            # Paso 1: Verificar estructura de m√≥dulos
            self.verificar_estructura_modulos()
            
            # Paso 2: Revisar ortograf√≠a OPTIMIZADA
            self.revisar_ortografia_optimizada()
            
            # Paso 3: Analizar videos
            self.analizar_videos()
            
            # Paso 4: Generar reporte optimizado
            ruta_reporte = self.generar_reporte_optimizado()
            
            print("=" * 70)
            print("‚úÖ AUDITOR√çA OPTIMIZADA COMPLETADA")
            print("=" * 70)
            print(f"üìä RESULTADOS OPTIMIZADOS:")
            print(f"   üìÑ Archivos revisados: {self.reporte['resumen_ejecutivo']['archivos_revisados']}")
            print(f"   üö® Problemas cr√≠ticos: {len(self.reporte['problemas_criticos'])}")
            print(f"   ‚ö†Ô∏è Problemas menores: {len(self.reporte['problemas_menores'])}")
            print(f"   ‚úèÔ∏è Errores ortogr√°ficos REALES: {len(self.reporte['errores_ortograficos'])}")
            print(f"   üíØ Completitud: {self.reporte['resumen_ejecutivo']['porcentaje_completitud']:.0f}%")
            print("=" * 70)
            print(f"üìÑ REPORTE: {ruta_reporte}")
            print("=" * 70)
            
            if len(self.reporte['problemas_criticos']) == 0:
                print("üéâ ¬°EXCELENTE! No hay problemas cr√≠ticos")
            else:
                print(f"‚ö†Ô∏è ATENCI√ìN: {len(self.reporte['problemas_criticos'])} problemas cr√≠ticos requieren correcci√≥n")
            
            print("\nüéØ OPTIMIZACIONES APLICADAS:")
            print("   ‚Ä¢ ‚ùå CORREGIDO: Extracci√≥n de texto (completo vs fragmentos)")
            print("   ‚Ä¢ ‚ùå CORREGIDO: Lista blanca incompleta")
            print("   ‚Ä¢ ‚ùå CORREGIDO: Limitaci√≥n artificial de 10 errores")
            print("   ‚Ä¢ ‚ùå CORREGIDO: Filtros demasiado agresivos")
            print("   ‚Ä¢ ‚úÖ AGREGADO: Contexto resaltado para localizaci√≥n")
            print("   ‚Ä¢ ‚úÖ AGREGADO: Facilidad de b√∫squeda en Word")
            
            return self.reporte, ruta_reporte
            
        except Exception as e:
            print(f"‚ùå ERROR CR√çTICO durante la auditor√≠a: {str(e)}")
            import traceback
            traceback.print_exc()
            return None, None


# FUNCI√ìN PRINCIPAL
def main():
    """
    Auditor OKR OPTIMIZADO - Corrige problemas ra√≠z del c√≥digo original
    """
    ruta_sharepoint = r"C:\Capacitaci√≥n Externa"
    
    # Verificar que la ruta existe
    if not Path(ruta_sharepoint).exists():
        print("‚ùå Error: La ruta especificada no existe.")
        print("üìÅ Verifica la ruta de la carpeta sincronizada")
        return
    
    print("üéØ AUDITOR OKR OPTIMIZADO v9.0")
    print("Desarrollado por Romina S√°ez - 3IT Ingenier√≠a y Desarrollo")
    print("üîß OPTIMIZACIONES CR√çTICAS:")
    print("   ‚Ä¢ Extracci√≥n de texto completo mejorada")
    print("   ‚Ä¢ Lista blanca completa de t√©rminos empresariales")
    print("   ‚Ä¢ Sin limitaciones artificiales")
    print("   ‚Ä¢ Filtros inteligentes optimizados")
    print("   ‚Ä¢ Detecci√≥n como 'herrmientas' restaurada")
    print()
    
    # Crear auditor y ejecutar
    auditor = AuditorOKROptimizado(ruta_sharepoint)
    reporte, archivo_reporte = auditor.ejecutar_auditoria_optimizada()
    
    if reporte:
        print("\nüéØ RESUMEN FINAL OPTIMIZADO:")
        print(f"   Completitud del curso: {reporte['resumen_ejecutivo']['porcentaje_completitud']:.0f}%")
        print(f"   Archivos revisados: {reporte['resumen_ejecutivo']['archivos_revisados']}")
        print(f"   Problemas cr√≠ticos: {reporte['resumen_ejecutivo']['problemas_criticos']}")
        print(f"   Problemas menores: {reporte['resumen_ejecutivo']['problemas_menores']}")
        print(f"   Errores ortogr√°ficos REALES: {len(reporte['errores_ortograficos'])}")
        print()
        print("üìã GARANT√çAS DE OPTIMIZACI√ìN:")
        print("   üéØ Detecta errores como 'herrmientas' ‚Üí 'herramientas'")
        print("   üõ°Ô∏è Protege t√©rminos empresariales espec√≠ficos")
        print("   üìà Muestra TODOS los errores reales (sin l√≠mites)")
        print("   üîç Facilita localizaci√≥n en documentos Word")
        print("   ‚ö° Demuestra la potencia de la automatizaci√≥n")
        
        if reporte['resumen_ejecutivo']['problemas_criticos'] == 0:
            print("\nüéâ ¬°EXCELENTE! No hay problemas cr√≠ticos.")
        else:
            print(f"\n‚ö†Ô∏è ATENCI√ìN: {reporte['resumen_ejecutivo']['problemas_criticos']} problemas cr√≠ticos requieren correcci√≥n.")
        
        print(f"\nüéâ ¬°OPTIMIZACI√ìN COMPLETA! Abre: {archivo_reporte}")

if __name__ == "__main__":
    main()