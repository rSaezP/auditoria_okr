import os
import json
import pandas as pd
from pathlib import Path
from datetime import datetime
import language_tool_python
from docx import Document
from nltk.corpus import words
import warnings
import re
import subprocess
import sys
warnings.filterwarnings("ignore")

class AuditorOKROptimizado:
    def __init__(self, ruta_sharepoint):
        """
        Auditor OKR OPTIMIZADO - Corrige problemas ra√≠z del c√≥digo original + An√°lisis de Audio Completo
        """
        self.ruta_base = Path(ruta_sharepoint)
        
        # Inicializar LanguageTool
        print("üîß Inicializando LanguageTool...")
        try:
            self.spell_checker = language_tool_python.LanguageTool('es')
            print("‚úÖ LanguageTool cargado correctamente")
        except Exception as e:
            print(f"‚ùå Error cargando LanguageTool: {e}")
            self.spell_checker = None

        # Inicializar lista de palabras en ingl√©s
        print("üîß Inicializando lista de palabras en ingl√©s...")
        try:
            self.english_words = set(w.lower() for w in words.words())
            print("‚úÖ Creando lista de palabras en ingl√©s")
        except Exception as e:
            print(f"‚ùå Error cargando palabras en ingl√©s: {e}")
            self.english_words = None

        self.reporte = {
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "resumen_ejecutivo": {
                "archivos_revisados": 0,
                "problemas_criticos": 0,
                "problemas_menores": 0,
                "archivos_ok": 0,
                "porcentaje_completitud": 0
            },
            "estructura_modulos": {},
            "errores_ortograficos": [],
            "videos_problematicos": [],
            "problemas_audio": [],  # ‚úÖ AGREGADO: Secci√≥n para audio
            "archivos_faltantes": [],
            "problemas_criticos": [],
            "problemas_menores": [],
            "recomendaciones": []
        }
        
        # Contenido esperado (igual que tu original)
        self.contenido_esperado = {
            "MODULO 1": {
                "nombre": "Introducci√≥n a los OKR I",
                "subtemas": [
                    "1.1 Origen y evoluci√≥n de la gesti√≥n de metas okr",
                    "1.2 Concepto, estructura y empresas que los utilizan", 
                    "1.3 Diferencia entre objetivos y resultados clave",
                    "1.4 Tipos de OKR: comprometidos vs. aspiracionales",
                    "1.5 Jerarqu√≠a y alineaci√≥n de los OKR"
                ]
            },
            "MODULO 2": {
                "nombre": "Introducci√≥n a los OKR II",
                "subtemas": [
                    "2.1 Comparaci√≥n entre MBO, SMART, KPIs y OKR",
                    "2.2 Integraci√≥n de OKR con modelos estrat√©gicos (BSC, Hoshin Kanri)",
                    "2.3 Cultura organizacional y alineaci√≥n con la misi√≥n y visi√≥n",
                    "2.4 Liderazgo √°gil y su impacto en los OKR",
                    "2.5 Beneficios y desaf√≠os de implementar OKR"
                ]
            },
            "MODULO 3": {
                "nombre": "Gesti√≥n con los OKR",
                "subtemas": [
                    "3.1 Roles clave, OKR Champion y OKR Owner",
                    "3.2 Relaci√≥n entre OKR y gesti√≥n del desempe√±o (CFR)",
                    "3.3 Uso de herramientas y tableros Kanban para OKR",
                    "3.4 Implementaci√≥n de OKR en la mejora continua",
                    "3.5 Principales errores y c√≥mo evitarlos"
                ]
            },
            "MODULO 4": {
                "nombre": "Ajustes de los OKR I",
                "subtemas": [
                    "4.1 Proceso de implementaci√≥n de OKR en la organizaci√≥n",
                    "4.2 Ciclo de planeaci√≥n y cronograma de seguimiento",
                    "4.3 Pasos clave para definir OKR efectivos",
                    "4.4 Evaluaci√≥n y ajuste de OKR en equipos",
                    "4.5 Buenas pr√°cticas para la ejecuci√≥n exitosa"
                ]
            },
            "MODULO 5": {
                "nombre": "Ajustando los OKR II",
                "subtemas": [
                    "5.1 Creaci√≥n y estructuraci√≥n de un OKR efectivo",
                    "5.2 M√©todos y herramientas para idear OKR (Brainwriting, Canvas)",
                    "5.3 Ejemplos pr√°cticos de aplicaci√≥n en empresas",
                    "5.4 Dise√±o de plantillas y formatos de trabajo",
                    "5.5 An√°lisis de un caso de estudio real"
                ]
            },
            "MODULO 6": {
                "nombre": "Alineando los OKR",
                "subtemas": [
                    "6.1 Estrategias para lograr alineaci√≥n organizacional",
                    "6.2 Alineaci√≥n vertical y horizontal de objetivos",
                    "6.3 Importancia de la cadencia y revisi√≥n de OKR",
                    "6.4 M√©todos de evaluaci√≥n y calificaci√≥n de OKR",
                    "6.5 Beneficios de los chequeos y revisiones peri√≥dicas"
                ]
            }
        }
        
        # ‚úÖ LISTA COMPLETA Y OPTIMIZADA DE PALABRAS V√ÅLIDAS
        self.palabras_validas = {
            # Siglas y t√©rminos t√©cnicos del curso
            'okr', 'okrs', 'mbo', 'mbos', 'smart', 'kpi', 'kpis', 'bsc', 'cfr',
            'hoshin', 'kanri', 'kaizen', 'scrum', 'agile', 'kanban', 'lean',
            
            # Nombres propios y empresas
            'drucker', 'grove', 'doerr', 'google', 'intel', 'linkedin', 'twitter',
            'kaplan', 'norton', 'andy', 'peter', 'john', 'netflix', 'amazon',
            'microsoft', 'apple', 'facebook', 'meta', 'tesla',
            
            # T√©rminos t√©cnicos en ingl√©s aceptados
            'canvas', 'brainwriting', 'champion', 'owner', 'scorecard',
            'balanced', 'management', 'objectives', 'results', 'key', 'performance', 
            'indicators', 'specific', 'measurable', 'achievable', 'relevant', 'time-bound',
            'framework', 'frameworks', 'dashboard', 'dashboards', 'feedback',
            'coaching', 'mentoring', 'leadership', 'stakeholder', 'stakeholders',
            'workshop', 'workshops', 'business', 'startup', 'startups',
            'benchmarking', 'benchmark', 'analytics', 'insights', 'metrics',
            
            # üéØ T√âRMINOS EMPRESARIALES QUE MARCABAS COMO ERRORES (TUS FALSOS POSITIVOS)
            'aspiracional', 'aspiracionales', 'aspiraciones', 'aspiracion',
            'interfuncional', 'interfuncionales',
            'interequipos', 'interequipo',
            'interciclos', 'interciclo', 
            'inter√°rea', 'interarea', 'inter√°reas', 'interareas',
            'operacionalizar', 'operacionalizacion', 'operacionalizaci√≥n',
            'operacionalizados', 'operacionalizadas', 'operacionalizando',
            'retrabajos', 'retrabajo',
            'cuantificabilidad', 'planificabilidad',
            'reencaminar', 'reencaminamos', 'reencaminando',
            
            # T√©rminos empresariales modernos adicionales
            'networking', 'brainstorming', 'outsourcing', 'freelancing',
            'coworking', 'scaling', 'pivoting', 'bootstrapping', 'crowdfunding',
            'crowdsourcing', 'fintech', 'edtech', 'healthtech',
            
            # T√©rminos t√©cnicos v√°lidos
            'email', 'emails', 'online', 'offline', 'software', 'hardware',
            'mobile', 'app', 'apps', 'website', 'web', 'cloud', 'digital',
            'api', 'apis', 'crm', 'erp', 'bi', 'etl', 'saas', 'paas', 'iaas',
            'devops', 'agile', 'scrum', 'sprint', 'backlog', 'kanban',
            
            # T√©rminos del curso que son correctos
            'master', 'm√°ster', 'piloto', 'pilotos', 'testing', 'debugging',
            'deployment', 'rollout', 'rollback', 'go-live',
            
            # Palabras que LanguageTool suele marcar incorrectamente
            'coronavirus', 'covid', 'blockchain', 'bitcoin', 'cryptocurrency',
            'millennials', 'influencer', 'influencers', 'youtuber', 'youtubers',
            'podcast', 'podcasts', 'streaming', 'hashtag', 'hashtags',
            
            # T√©rminos correctos del espa√±ol que pueden marcarse mal
            'an√°lisis', 'crisis', 'tesis', 's√≠ntesis', 'hip√≥tesis', '√©nfasis',
            'par√©ntesis', 'di√≥cesis', 'g√©nesis', 'pr√≥tesis', 'metamorfosis',
            'simbiosis', 'diagnosis', 'prognosis', 'catarsis', 'nemesis'
        }
        
        print(f"‚úÖ Lista de palabras v√°lidas: {len(self.palabras_validas)} t√©rminos protegidos")

        # üéØ EXPANSI√ìN BASADA EN TU REPORTE ESPEC√çFICO - CAMBIO 1
        palabras_de_tu_reporte = {
            'catchball', 'owners', 'champions', 'masters', 'workboard', 
            'perdoo', 'koan', 'betterworks', 'weekdone', 'picking', 
            'mindset', 'auditables', 'ejecutados', 'co-creaci√≥n', 
            'co-dise√±o', 'subapartado', 'propias', 'frecuentes', 
            'correctos', 'espec√≠ficos', 'valida', 'krs'
        }
        self.palabras_validas.update(palabras_de_tu_reporte)
        print(f"‚úÖ EXPANDIDO: +{len(palabras_de_tu_reporte)} palabras de tu reporte")

    # ‚úÖ FUNCI√ìN MEJORADA PARA VERIFICAR Y COPIAR LOGO
    def verificar_logo_existe(self):
        """Verificar si existe el logo y copiarlo al directorio del reporte si es necesario"""
        import shutil
        
        # Buscar logo en la carpeta del proyecto (donde est√° el .py)
        logo_proyecto = Path("logo-3it.png")
        # Ubicaci√≥n donde se guardar√° el reporte HTML
        logo_destino = self.ruta_base / "logo-3it.png"
        
        if logo_proyecto.exists():
            try:
                # Copiar logo al directorio donde se guarda el reporte
                shutil.copy2(logo_proyecto, logo_destino)
                print("‚úÖ Logo 3IT encontrado y copiado al directorio del reporte")
                return True
            except Exception as e:
                print(f"‚ö†Ô∏è Error copiando logo: {e}")
                return False
        else:
            print(f"‚ö†Ô∏è Logo no encontrado en carpeta del proyecto")
            print("üìÅ Usando dise√±o de texto como respaldo")
            return False

    # ‚úÖ M√âTODOS PARA AN√ÅLISIS DE AUDIO INTEGRADOS DESDE EL SEGUNDO C√ìDIGO
    def instalar_pydub_si_necesario(self):
        """Instalar PyDub autom√°ticamente"""
        try:
            from pydub import AudioSegment
            from pydub.silence import detect_silence
            print("‚úÖ PyDub disponible")
            return True
        except ImportError:
            print("üì¶ Instalando PyDub...")
            try:
                subprocess.check_call([sys.executable, "-m", "pip", "install", "pydub"])
                print("‚úÖ PyDub instalado correctamente")
                return True
            except Exception as e:
                print(f"‚ùå Error instalando PyDub: {e}")
                return False

    def detectar_problemas_audio_optimizado(self, ruta_video):
        """M√âTODO COMPLETO: An√°lisis de TODO EL VIDEO"""
        try:
            from pydub import AudioSegment
            from pydub.silence import detect_silence
            
            print(f"üìä Analizando audio completo...", end=" ", flush=True)
            
            # Extraer audio del video COMPLETO
            audio = AudioSegment.from_file(str(ruta_video))
            
            # M√©tricas b√°sicas del video COMPLETO
            duracion_total = len(audio) / 1000
            max_volumen = audio.max_dBFS
            
            # An√°lisis COMPLETO de silencios
            silencios = detect_silence(audio, min_silence_len=2000, silence_thresh=-50)
            duracion_silencios = sum(end - start for start, end in silencios) / 1000
            porcentaje_silencio = (duracion_silencios / duracion_total) * 100 if duracion_total > 0 else 100
            
            # An√°lisis de consistencia de volumen
            segmentos = []
            chunk_size = 10000
            for i in range(0, len(audio), chunk_size):
                chunk = audio[i:i+chunk_size]
                if len(chunk) > 1000:
                    segmentos.append(chunk.max_dBFS)
            
            if len(segmentos) > 1:
                import statistics
                volumen_promedio = statistics.mean(segmentos)
                volumen_desviacion = statistics.stdev(segmentos) if len(segmentos) > 1 else 0
                volumen_minimo = min(segmentos)
            else:
                volumen_promedio = max_volumen
                volumen_desviacion = 0
                volumen_minimo = max_volumen
            
            # Evaluar problemas espec√≠ficos
            problemas = []
            nivel_critico = False
            
            # 1. SIN AUDIO (cr√≠tico)
            if max_volumen < -60:
                problemas.append("SIN AUDIO AUDIBLE")
                nivel_critico = True
            
            # 2. AUDIO SATURADO (cr√≠tico)
            elif max_volumen > -1:
                problemas.append("AUDIO SATURADO/DISTORSIONADO")
                nivel_critico = True
            
            # 3. DEMASIADO SILENCIO (cr√≠tico para cursos)
            elif porcentaje_silencio > 40:
                problemas.append(f"EXCESO DE SILENCIO ({porcentaje_silencio:.1f}%)")
                nivel_critico = True
            
            # 4. VIDEO MUY CORTO (cr√≠tico para cursos)
            elif duracion_total < 30:
                problemas.append(f"VIDEO MUY CORTO ({duracion_total:.1f}s)")
                nivel_critico = True
            
            # 5. PROBLEMAS MENORES
            elif porcentaje_silencio > 25:
                problemas.append(f"BASTANTE SILENCIO ({porcentaje_silencio:.1f}%)")
            elif max_volumen < -40:
                problemas.append("AUDIO MUY BAJO")
            elif len(silencios) > 15:
                problemas.append(f"MUCHOS CORTES ({len(silencios)} silencios)")
            elif volumen_desviacion > 10:
                problemas.append(f"VOLUMEN INCONSISTENTE (¬±{volumen_desviacion:.1f}dB)")
            elif volumen_minimo < -50 and max_volumen > -20:
                problemas.append("AUDIO CON PICOS Y VALLES")
            
            print("‚úÖ")
            
            return {
                "tiene_problemas": len(problemas) > 0,
                "es_critico": nivel_critico,
                "problemas": problemas,
                "metricas": {
                    "duracion": duracion_total,
                    "volumen_max": max_volumen,
                    "volumen_promedio": volumen_promedio,
                    "volumen_minimo": volumen_minimo,
                    "volumen_desviacion": volumen_desviacion,
                    "porcentaje_silencio": porcentaje_silencio,
                    "cantidad_silencios": len(silencios),
                    "duracion_silencios": duracion_silencios
                }
            }
            
        except Exception as e:
            print(f"‚ùå")
            # ‚úÖ CORRECCI√ìN: Desde l√≠nea 320 en adelante

            return {
                "tiene_problemas": True,
                "es_critico": True,
                "problemas": [f"ERROR AN√ÅLISIS AUDIO: {str(e)}"],
                "metricas": {
                    "duracion": 0,
                    "volumen_max": 0,
                    "volumen_promedio": 0,
                    "volumen_minimo": 0,
                    "volumen_desviacion": 0,
                    "porcentaje_silencio": 0,
                    "cantidad_silencios": 0,
                    "duracion_silencios": 0
                }
            }

    def verificar_estructura_modulos(self):  # ‚úÖ CORREGIDO: 4 espacios, no 8
        """Verificar estructura completa de m√≥dulos vs ficha (IGUAL QUE TU ORIGINAL)"""
        print("üîç Verificando estructura de m√≥dulos...")
        
        for modulo_key, modulo_info in self.contenido_esperado.items():
            modulo_path = self.ruta_base / modulo_key
            
            estado_modulo = {
                "nombre": modulo_info["nombre"],
                "documentos_esperados": 5,
                "documentos_encontrados": 0,
                "videos_esperados": 5,
                "videos_encontrados": 0,
                "archivos_faltantes": [],
                "estado": "INCOMPLETO"
            }
            
            
            if modulo_path.exists():
                # Verificar documentos
                material_path = modulo_path / "MATERIAL DE ESTUDIO"
                if material_path.exists():
                    archivos_material = list(material_path.glob("*.docx"))
                    estado_modulo["documentos_encontrados"] = len(archivos_material)
                    
                    # Verificar cada subtema espec√≠fico
                    numero_modulo = modulo_key.split()[1]
                    for i, subtema in enumerate(modulo_info["subtemas"], 1):
                        numero_subtema = f"{numero_modulo}.{i}"
                        archivo_esperado = f"Modulo {numero_subtema}.docx"
                        
                        archivo_existe = any(numero_subtema in archivo.name for archivo in archivos_material)
                        if not archivo_existe:
                            estado_modulo["archivos_faltantes"].append({
                                "tipo": "documento",
                                "archivo": archivo_esperado,
                                "subtema": subtema
                            })
                
                # Verificar videos
                videos_path = modulo_path / "VIDEOS"
                if videos_path.exists():
                    archivos_videos = list(videos_path.glob("*.mp4")) + list(videos_path.glob("*.avi")) + list(videos_path.glob("*.mov"))
                    estado_modulo["videos_encontrados"] = len(archivos_videos)
            
            # Determinar estado del m√≥dulo
            if (estado_modulo["documentos_encontrados"] == 5 and 
                estado_modulo["videos_encontrados"] >= 5):
                estado_modulo["estado"] = "COMPLETO"
            elif (estado_modulo["documentos_encontrados"] >= 3 and 
                  estado_modulo["videos_encontrados"] >= 3):
                estado_modulo["estado"] = "PARCIAL"
            else:
                estado_modulo["estado"] = "CR√çTICO"
            
            self.reporte["estructura_modulos"][modulo_key] = estado_modulo
        
        print("‚úÖ An√°lisis de estructura completado")

    def revisar_ortografia_optimizada(self):
        """
        üéØ REVISI√ìN ORTOGR√ÅFICA OPTIMIZADA
        Corrige los problemas ra√≠z del c√≥digo original
        """
        print("üìù Revisando ortograf√≠a con detecci√≥n optimizada...")
        
        if not self.spell_checker:
            print("‚ùå LanguageTool no disponible, saltando revisi√≥n ortogr√°fica")
            return
        
        documentos_revisados = 0
        total_errores_encontrados = 0
        
        for i in range(1, 7):
            modulo_path = self.ruta_base / f"MODULO {i}" / "MATERIAL DE ESTUDIO"
            
            if not modulo_path.exists():
                continue
                
            archivos_word = list(modulo_path.glob("*.docx"))
            
            for archivo in archivos_word:
                print(f"      Analizando {archivo.name}...")
                
                try:
                    # Abrir documento
                    doc = Document(archivo)
                    texto_completo = ""
                    
                    # ‚úÖ EXTRACCI√ìN MEJORADA: Extraer TODO el texto
                    for paragraph in doc.paragraphs:
                        texto_completo += paragraph.text + "\n"
                    
                    # Verificar que el documento no est√© vac√≠o
                    if len(texto_completo.strip()) < 100:
                        self.reporte["problemas_criticos"].append({
                            "tipo": "documento_vacio",
                            "archivo": archivo.name,
                            "descripcion": f"Documento muy corto o vac√≠o ({len(texto_completo)} caracteres)"
                        })
                        continue
                    
                    # ‚úÖ SPELL CHECK MEJORADO: Usar texto completo, no fragmentos
                    errores = self.spell_checker.check(texto_completo)
                    errores_reales = []
                    
                    # ‚úÖ FILTRADO OPTIMIZADO DE FALSOS POSITIVOS
                    for error in errores:
                        try:
                            # ‚úÖ CORRECCI√ìN CR√çTICA: Extraer palabra del TEXTO COMPLETO, no del contexto
                            start_pos = error.offset
                            end_pos = error.offset + error.errorLength
                            palabra_error = texto_completo[start_pos:end_pos]
                            palabra_limpia = palabra_error.lower().strip('.,;:!?()[]{}"\'-')

                            # ‚úÖ FILTRO INTELIGENTE MEJORADO - CAMBIO 2
                            if self.es_error_real(palabra_limpia, error):
                                # ‚úÖ CONTEXTO MEJORADO: Extraer del texto completo
                                inicio_contexto = max(0, start_pos - 30)
                                fin_contexto = min(len(texto_completo), end_pos + 30)
                                contexto = texto_completo[inicio_contexto:fin_contexto].strip()
                                
                                # ‚úÖ RESALTAR ERROR EN CONTEXTO
                                contexto_resaltado = self.resaltar_error_en_contexto(contexto, palabra_error)
                                
                                errores_reales.append({
                                    "archivo": archivo.name,
                                    "modulo": f"MODULO {i}",
                                    "texto_error": contexto_resaltado,
                                    "palabra_incorrecta": palabra_error,
                                    "sugerencias": ", ".join(error.replacements[:3]) if error.replacements else "Sin sugerencias",
                                    "tipo_error": self.clasificar_tipo_error(error),
                                    "buscar_texto": palabra_error  # Para facilitar b√∫squeda en Word
                                })
                        
                        except Exception as e:
                            # Si hay error extrayendo, continuar con el siguiente
                            continue
                    
                    # ‚úÖ NO LIMITAR ARBITRARIAMENTE: Mostrar todos los errores reales
                    self.reporte["errores_ortograficos"].extend(errores_reales)
                    total_errores_encontrados += len(errores_reales)
                    
                    # Categorizar errores por severidad
                    if len(errores_reales) > 10:
                        self.reporte["problemas_criticos"].append({
                            "tipo": "ortografia_critica",
                            "archivo": archivo.name,
                            "descripcion": f"{len(errores_reales)} errores ortogr√°ficos cr√≠ticos detectados"
                        })
                    elif len(errores_reales) > 5:
                        self.reporte["problemas_menores"].append({
                            "tipo": "ortografia_menor",
                            "archivo": archivo.name,
                            "descripcion": f"{len(errores_reales)} errores ortogr√°ficos menores detectados"
                        })
                    
                    documentos_revisados += 1
                    
                except Exception as e:
                    self.reporte["problemas_criticos"].append({
                        "tipo": "error_archivo",
                        "archivo": archivo.name,
                        "descripcion": f"Error al abrir archivo: {str(e)}"
                    })
        
        self.reporte["resumen_ejecutivo"]["archivos_revisados"] = documentos_revisados
        print(f"‚úÖ Documentos revisados: {documentos_revisados}")
        print(f"‚úÖ Total errores ortogr√°ficos detectados: {total_errores_encontrados}")

    def es_error_real(self, palabra_limpia, error):
        """
        ‚úÖ FILTRO MEJORADO basado en tu reporte de 76 errores - CAMBIO 2 COMPLETO
        """
        contexto = error.context.lower()
        
        # ‚úÖ GARANT√çA: SIEMPRE MOSTRAR errores tipogr√°ficos evidentes PRIMERO
        errores_tipograficos_comunes = [
            'herrmientas',     # herramientas mal escrito
            'anlaisis',        # an√°lisis mal escrito  
            'implementacion',  # implementaci√≥n sin tilde
            'organizacion',    # organizaci√≥n sin tilde
            'evaluacion',      # evaluaci√≥n sin tilde
            'administracion',  # administraci√≥n sin tilde
            'informacion',     # informaci√≥n sin tilde
            'solucion',        # soluci√≥n sin tilde
            'direccion',       # direcci√≥n sin tilde
            'gestion',         # gesti√≥n sin tilde
            'comunicacion',    # comunicaci√≥n sin tilde
            'documentacion',   # documentaci√≥n sin tilde
            'planificacion',   # planificaci√≥n sin tilde
            'capacitacion',    # capacitaci√≥n sin tilde
        ]
        
        # Si es un error tipogr√°fico claro, SIEMPRE mostrarlo
        if palabra_limpia in errores_tipograficos_comunes:
            print(f"        ‚úÖ ERROR TIPOGR√ÅFICO DETECTADO: '{palabra_limpia}'")
            return True
        
        # 1. FILTRAR referencias num√©ricas como "6.1 6.1"
        if re.search(r'\d+\.\d+\s+\d+\.\d+', contexto):
            return False
        
        # 2. FILTRAR n√∫meros puros
        if re.match(r'^[\d\.\-\+\(\)\s:]+$', palabra_limpia):
            return False
        
        # 3. USAR lista expandida (incluye las nuevas palabras de tu reporte)
        if palabra_limpia in self.palabras_validas:
            return False
        
        # 4. FILTRO NLTK para palabras en ingl√©s
        if hasattr(self, 'english_words') and self.english_words and palabra_limpia in self.english_words:
            return False
        
        # 5. FILTRAR t√≠tulos repetidos como "An√°lisis An√°lisis"
        if re.search(r'^[A-Z√Å√â√ç√ì√ö][a-z√°√©√≠√≥√∫]+\s+[A-Z√Å√â√ç√ì√ö][a-z√°√©√≠√≥√∫]+', contexto.strip()):
            return False
        
        # 6. FILTRAR nombres propios
        if len(palabra_limpia) > 3 and palabra_limpia[0].isupper():
            return False
        
        # 7. FILTRAR palabras muy cortas o muy largas
        if len(palabra_limpia) < 3 or len(palabra_limpia) > 25:
            return False
        
        # 8. FILTRAR URLs y emails
        if any(x in palabra_limpia for x in ['http', 'www', '@', '.com', '.org']):
            return False
        
        # 9. FILTRAR c√≥digos t√©cnicos
        if any(char.isdigit() for char in palabra_limpia) and len(palabra_limpia) < 8:
            return False
        
        # 10. SOLO MANTENER errores realmente evidentes
        errores_reales = [
            'este cursos', 'esta cursos', 'estos curso', 'estas curso',
            'la la pr√°ctica', 'el el sistema', 'malentendidos mejora'
        ]
        
        if any(real in contexto for real in errores_reales):
            return True
        
        # 11. Para otros casos, ser muy conservador con palabras comunes
        palabras_comunes_validas = {
            'pero', 'sino', 'tanto', 'adicionalmente', 'estimada', 
            'objetivo', 'proyecto', 'mejora', 'logro', 'valida'
        }
        
        if palabra_limpia in palabras_comunes_validas:
            # Solo mantener si hay problema de puntuaci√≥n claro
            if any(punct in contexto for punct in [' pero ', ' sino ', ' tanto ']):
                return True  # Mantener problemas de comas importantes
            return False
        
        # Si lleg√≥ aqu√≠, probablemente es un error real
        return True

    def clasificar_tipo_error(self, error):
        """Clasificar el tipo de error ortogr√°fico"""
        if hasattr(error, 'ruleIssueType'):
            return error.ruleIssueType
        elif hasattr(error, 'category'):
            return error.category.name if hasattr(error.category, 'name') else str(error.category)
        else:
            return "ORTOGRAFIA"

    def resaltar_error_en_contexto(self, contexto, palabra_error):
        """Resaltar la palabra con error en el contexto"""
        if not palabra_error or len(palabra_error) < 2:
            return contexto
        
        pattern = re.compile(re.escape(palabra_error), re.IGNORECASE)
        return pattern.sub(f'<span style="background:yellow; font-weight:bold;">{palabra_error}</span>', contexto, count=1)

    def analizar_videos(self):
        """An√°lisis b√°sico pero efectivo de videos (IGUAL QUE TU ORIGINAL)"""
        print("üé• Analizando videos...")
        
        videos_analizados = 0
        
        for i in range(1, 7):
            videos_path = self.ruta_base / f"MODULO {i}" / "VIDEOS"
            
            if not videos_path.exists():
                continue
            
            archivos_video = list(videos_path.glob("*.mp4")) + list(videos_path.glob("*.avi")) + list(videos_path.glob("*.mov"))
            
            for video in archivos_video:
                try:
                    tama√±o_bytes = video.stat().st_size
                    tama√±o_mb = tama√±o_bytes / (1024 * 1024)
                    
                    problema_video = {
                        "archivo": video.name,
                        "modulo": f"MODULO {i}",
                        "tama√±o_mb": f"{tama√±o_mb:.1f} MB",
                        "problema": None
                    }
                    
                    # Detectar problemas
                    if tama√±o_bytes == 0:
                        problema_video["problema"] = "Archivo corrupto (0 bytes)"
                        self.reporte["problemas_criticos"].append({
                            "tipo": "video_corrupto",
                            "archivo": video.name,
                            "descripcion": "Video corrupto - 0 bytes"
                        })
                    elif tama√±o_mb < 1:
                        problema_video["problema"] = "Archivo sospechosamente peque√±o"
                        self.reporte["problemas_criticos"].append({
                            "tipo": "video_peque√±o",
                            "archivo": video.name,
                            "descripcion": f"Video muy peque√±o ({tama√±o_mb:.1f} MB)"
                        })
                    elif tama√±o_mb > 500:
                        problema_video["problema"] = "Archivo muy grande"
                        self.reporte["problemas_menores"].append({
                            "tipo": "video_grande",
                            "archivo": video.name,
                            "descripcion": f"Video muy grande ({tama√±o_mb:.1f} MB)"
                        })
                    
                    self.reporte["videos_problematicos"].append(problema_video)
                    videos_analizados += 1
                    
                except Exception as e:
                    self.reporte["problemas_criticos"].append({
                        "tipo": "error_video",
                        "archivo": video.name,
                        "descripcion": f"Error al analizar video: {str(e)}"
                    })
        
        print(f"‚úÖ Videos analizados: {videos_analizados}")

    # ‚úÖ M√âTODO COMPLETO DE AN√ÅLISIS DE AUDIO INTEGRADO DESDE EL SEGUNDO C√ìDIGO
    def analizar_audio_videos(self):
        """Analizar audio de TODOS los videos CON REPORTE DETALLADO"""
        print("üéµ Analizando AUDIO de videos con PyDub...")
        
        if not self.instalar_pydub_si_necesario():
            print("‚ùå No se pudo instalar PyDub, saltando an√°lisis de audio")
            return
        
        videos_analizados = 0
        videos_con_problemas_audio = 0
        
        # üéØ REPORTE DETALLADO DE CADA VIDEO
        print(f"\n{'='*100}")
        print("üéµ REPORTE DETALLADO DE AUDIO POR VIDEO (AN√ÅLISIS COMPLETO)")
        print(f"{'='*100}")
        print(f"{'Video':<20} {'Duraci√≥n':<12} {'Vol.Max':<10} {'Vol.Prom':<10} {'Vol.Min':<10} {'¬±Desv':<8} {'%Sil':<8} {'Estado':<15}")
        print(f"{'-'*100}")
        
        for i in range(1, 7):
            videos_path = self.ruta_base / f"MODULO {i}" / "VIDEOS"
            
            if not videos_path.exists():
                continue
            
            archivos_video = list(videos_path.glob("*.mp4")) + list(videos_path.glob("*.avi")) + list(videos_path.glob("*.mov"))
            
            for video in archivos_video:
                try:
                    tama√±o_bytes = video.stat().st_size
                    if tama√±o_bytes == 0:
                        print(f"{video.name:<20} {'CORRUPTO':<12} {'N/A':<10} {'N/A':<10} {'N/A':<10} {'N/A':<8} {'N/A':<8} {'‚ùå CORRUPTO':<15}")
                        continue
                    
                    resultado_audio = self.detectar_problemas_audio_optimizado(video)
                    
                    # Extraer m√©tricas para mostrar
                    metricas = resultado_audio.get("metricas", {})
                    duracion = metricas.get("duracion", 0)
                    vol_max = metricas.get("volumen_max", 0)
                    vol_prom = metricas.get("volumen_promedio", 0)
                    vol_min = metricas.get("volumen_minimo", 0)
                    vol_desv = metricas.get("volumen_desviacion", 0)
                    silencio = metricas.get("porcentaje_silencio", 0)
                    
                    # Determinar estado visual
                    if resultado_audio["tiene_problemas"]:
                        if resultado_audio["es_critico"]:
                            estado = "üö® CR√çTICO"
                            videos_con_problemas_audio += 1
                        else:
                            estado = "‚ö†Ô∏è MENOR"
                            videos_con_problemas_audio += 1
                    else:
                        estado = "‚úÖ PERFECTO"
                    
                    # Mostrar l√≠nea detallada
                    print(f"{video.name:<20} {duracion:<11.1f}s {vol_max:<9.1f}dB {vol_prom:<9.1f}dB {vol_min:<9.1f}dB {vol_desv:<7.1f}dB {silencio:<7.1f}% {estado:<15}")
                    
                    # Si hay problemas, mostrar detalles
                    if resultado_audio["tiene_problemas"]:
                        problemas_texto = ", ".join(resultado_audio["problemas"])
                        print(f"{'   ‚Üí Problemas:':<20} {problemas_texto}")
                    
                    # Agregar al reporte
                    audio_info = {
                        "archivo": video.name,
                        "modulo": f"MODULO {i}",
                        "problemas_audio": resultado_audio["problemas"],
                        "metricas_audio": resultado_audio["metricas"],
                        "estado_audio": "PROBLEMAS" if resultado_audio["tiene_problemas"] else "OK"
                    }
                    
                    self.reporte["problemas_audio"].append(audio_info)
                    
                    if resultado_audio["tiene_problemas"]:
                        descripcion = f"Problemas de audio: {', '.join(resultado_audio['problemas'])}"
                        
                        if resultado_audio["es_critico"]:
                            self.reporte["problemas_criticos"].append({
                                "tipo": "audio_critico",
                                "archivo": video.name,
                                "modulo": f"MODULO {i}",
                                "descripcion": descripcion,
                                "detalles": resultado_audio["metricas"]
                            })
                        else:
                            self.reporte["problemas_menores"].append({
                                "tipo": "audio_menor",
                                "archivo": video.name,
                                "modulo": f"MODULO {i}",
                                "descripcion": descripcion,
                                "detalles": resultado_audio["metricas"]
                            })
                    
                    videos_analizados += 1
                    
                except Exception as e:
                    print(f"{video.name:<20} {'ERROR':<12} {'N/A':<10} {'N/A':<10} {'N/A':<10} {'N/A':<8} {'N/A':<8} {'‚ùå ERROR':<15}")
                    print(f"   ‚Üí Error: {str(e)[:60]}...")
                    self.reporte["problemas_criticos"].append({
                        "tipo": "error_analisis_audio",
                        "archivo": video.name,
                        "modulo": f"MODULO {i}",
                        "descripcion": f"Error al analizar audio: {str(e)}"
                    })
        
        print(f"{'-'*100}")
        print(f"‚úÖ Audio de videos analizados: {videos_analizados}")
        print(f"‚ö†Ô∏è Videos con problemas de audio: {videos_con_problemas_audio}")
        print(f"{'='*100}")

        # ‚úÖ FUNCI√ìN COMPLETAMENTE NUEVA CON DISE√ëO 3IT Y LOGO + SECCI√ìN DE AUDIO
    def generar_reporte_3it_optimizado(self):
        """Generar reporte HTML con dise√±o 3IT profesional y logo real + an√°lisis de audio"""
        
        # Calcular estad√≠sticas (IGUAL QUE ANTES)
        total_criticos = len(self.reporte["problemas_criticos"])
        total_menores = len(self.reporte["problemas_menores"])
        total_errores_ortografia = len(self.reporte["errores_ortograficos"])
        
        # Calcular completitud (IGUAL QUE ANTES)
        modulos_completos = sum(1 for m in self.reporte["estructura_modulos"].values() if m["estado"] == "COMPLETO")
        porcentaje_completitud = (modulos_completos / 6) * 100
        
        self.reporte["resumen_ejecutivo"].update({
            "problemas_criticos": total_criticos,
            "problemas_menores": total_menores,
            "porcentaje_completitud": porcentaje_completitud
        })
        
        # ‚úÖ SIMPLIFICADO: Verificar si existe el logo
        logo_existe = self.verificar_logo_existe()
        
        # Funci√≥n para determinar color de estado
        def get_status_color(value, is_percentage=False):
            if is_percentage:
                if value >= 90: return "excellent"
                elif value >= 70: return "warning"
                else: return "warning"
            else:
                return "warning" if value > 0 else "excellent"
        
        # ‚úÖ CSS LOGO SIN FONDO NI PADDING - SOLO LA IMAGEN M√ÅS GRANDE A√öN
        if logo_existe:
            logo_css = """
        .logo-3it {
            width: 150px;
            height: 150px;
            background-image: url('logo-3it.png');
            background-size: contain;
            background-repeat: no-repeat;
            background-position: center;
        }
        
        .footer-logo .logo-3it {
            width: 80px;
            height: 80px;
            background-image: url('logo-3it.png');
            background-size: contain;
            background-repeat: no-repeat;
            background-position: center;
        }"""
            logo_html = '<div class="logo-3it"></div>'
            logo_footer_html = '<div class="logo-3it"></div>'
        else:
            # Fallback al dise√±o de texto
            logo_css = """
        .logo-3it {
            width: 150px;
            height: 150px;
            background: var(--blanco);
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            color: var(--azul-tritiano);
            font-size: 40px;
        }
        
        .footer-logo .logo-3it {
            width: 80px;
            height: 80px;
            font-size: 28px;
            background: var(--blanco);
            color: var(--azul-tritiano);
        }"""
            logo_html = '<div class="logo-3it">3IT</div>'
            logo_footer_html = '<div class="logo-3it">3IT</div>'
        
        # ‚úÖ HTML COMPLETO CON DISE√ëO 3IT PROFESIONAL + AUDIO
        html = f"""<!DOCTYPE html>
        <html lang="es">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Reporte Auditor√≠a Curso OKR - 3IT</title>
            <style>
                /* ===== RESET Y CONFIGURACI√ìN BASE ===== */
                * {{
                    margin: 0;
                    padding: 0;
                    box-sizing: border-box;
                }}

        /* ===== CONFIGURACI√ìN PARA PDF ===== */
        @media print {{
            /* Evitar p√°ginas en blanco */
            .content-section {{
                page-break-inside: avoid;
                break-inside: avoid;
                min-height: auto;
                padding: 20px 40px;
            }}
            
            /* Solo forzar salto de p√°gina cuando hay contenido suficiente */
            .page-break {{
                page-break-before: always;
            }}
            
            .summary-grid {{
                grid-template-columns: 1fr 1fr;
                page-break-inside: avoid;
            }}
            
            .summary-card {{
                page-break-inside: avoid;
                break-inside: avoid;
            }}
            
            .module-grid {{
                grid-template-columns: 1fr 1fr;
                page-break-inside: avoid;
            }}
            
            .module-card {{
                page-break-inside: avoid;
                break-inside: avoid;
                margin-bottom: 10px;
            }}
            
            /* Mejorar alertas para PDF */
            .alert {{
                page-break-inside: avoid;
                break-inside: avoid;
                margin: 10px 0;
            }}
            
            /* Optimizar tablas para PDF */
            .table-container {{
                page-break-inside: auto;
            }}
            
            table {{
                page-break-inside: auto;
            }}
            
            thead {{
                display: table-header-group;
            }}
            
            tbody {{
                display: table-row-group;
            }}
            
            /* Evitar l√≠neas hu√©rfanas */
            h2, h3 {{
                page-break-after: avoid;
                orphans: 3;
                widows: 3;
            }}
            
            /* Asegurar colores en PDF */
            body {{
                -webkit-print-color-adjust: exact !important;
                color-adjust: exact !important;
                print-color-adjust: exact !important;
            }}
        }}
      

        /* ===== TIPOGRAF√çA 3IT ===== */
        body {{
            font-family: 'Century Gothic', 'CenturyGothic', 'AppleGothic', sans-serif;
            line-height: 1.6;
            color: #000000;
            background: #FFFFFF;
            font-size: 14px;
        }}

        /* ===== COLORES 3IT ===== */
        :root {{
            --azul-tritiano: #000026;
            --azul-electrico: #005AEE;
            --turquesa: #2CD5C4;
            --negro: #000000;
            --gris: #F2F3F3;
            --blanco: #FFFFFF;
        }}

        /* ===== LOGO PERSONALIZADO ===== */
        {logo_css}

        /* ===== HEADER MINIMALISTA ===== */
        .header {{
            background: linear-gradient(135deg, var(--azul-tritiano) 0%, var(--azul-electrico) 100%);
            color: var(--blanco);
            padding: 30px 40px;
            position: relative;
            overflow: hidden;
        }}

        .header::before {{
            content: '';
            position: absolute;
            top: -50%;
            right: -20%;
            width: 200px;
            height: 200px;
            background: var(--azul-electrico);
            border-radius: 50%;
            opacity: 0.1;
        }}

        .header-content {{
            display: flex;
            justify-content: space-between;
            align-items: center;
            position: relative;
            z-index: 2;
        }}

        .logo-section {{
            display: flex;
            align-items: center;
            gap: 20px;
            order: 2;
        }}

        .header-text {{
            order: 1;
        }}

        .header-text h1 {{
            font-size: 2rem;
            font-weight: 300;
            margin-bottom: 8px;
            letter-spacing: -0.5px;
        }}

        .header-text .subtitle {{
            font-size: 1rem;
            opacity: 0.9;
            font-weight: 300;
        }}

        .header-info {{
            text-align: right;
            font-size: 0.9rem;
            opacity: 0.8;
        }}

        /* ===== RESUMEN EJECUTIVO MINIMALISTA ===== */
        .executive-summary {{
            background: var(--gris);
            padding: 40px;
            border-bottom: 4px solid var(--azul-electrico);
        }}

        .summary-title {{
            text-align: center;
            color: var(--azul-tritiano);
            font-size: 1.8rem;
            font-weight: 300;
            margin-bottom: 30px;
            letter-spacing: -0.3px;
        }}

        .summary-grid {{
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 30px;
        }}

        .summary-card {{
            background: var(--blanco);
            border-radius: 8px;
            padding: 25px;
            text-align: center;
            box-shadow: 0 2px 10px rgba(0, 0, 38, 0.1);
            border-top: 3px solid var(--azul-electrico);
        }}

        .summary-number {{
            font-size: 2.5rem;
            font-weight: bold;
            margin-bottom: 8px;
        }}

        .summary-label {{
            font-size: 1rem;
            color: #666;
            font-weight: 300;
        }}

        .status-excellent {{ color: var(--azul-electrico); }}
        .status-warning {{ color: #FF6B35; }}
        .status-critical {{ color: #FF6B35; }}
        .status-info {{ color: var(--azul-electrico); }}

        /* ===== SECCIONES DE CONTENIDO ===== */
        .content-section {{
            padding: 40px;
            border-bottom: 1px solid var(--gris);
        }}

        .section-title {{
            color: var(--azul-tritiano);
            font-size: 1.5rem;
            font-weight: 300;
            margin-bottom: 25px;
            padding-bottom: 10px;
            border-bottom: 2px solid var(--azul-electrico);
            letter-spacing: -0.2px;
        }}

        /* ===== TARJETAS DE M√ìDULOS ===== */
        .module-grid {{
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin: 20px 0;
        }}

        .module-card {{
            background: var(--blanco);
            border: 1px solid #E5E5E5;
            border-radius: 8px;
            padding: 20px;
            transition: all 0.3s ease;
        }}

        .module-card:hover {{
            box-shadow: 0 4px 15px rgba(0, 0, 38, 0.1);
        }}

        .module-card.completo {{
            border-left: 4px solid var(--azul-electrico);
            background: var(--gris);
        }}

        .module-card.parcial {{
            border-left: 4px solid #FF6B35;
            background: var(--gris);
        }}

        .module-card.critico {{
            border-left: 4px solid #FF6B35;
            background: var(--gris);
        }}

        .module-title {{
            font-size: 1.1rem;
            font-weight: 600;
            color: var(--azul-tritiano);
            margin-bottom: 15px;
        }}

        .progress-bar {{
            width: 100%;
            height: 6px;
            background: #E5E5E5;
            border-radius: 3px;
            overflow: hidden;
            margin: 15px 0;
        }}

        .progress-fill {{
            height: 100%;
            transition: width 0.3s ease;
            border-radius: 3px;
        }}

        .progress-excellent {{ background: var(--azul-electrico); }}
        .progress-warning {{ background: #FF6B35; }}
        .progress-critical {{ background: #FF6B35; }}

        /* ===== TABLAS MINIMALISTAS ===== */
        .table-container {{
            overflow-x: auto;
            margin: 20px 0;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 38, 0.1);
        }}

        table {{
            width: 100%;
            border-collapse: collapse;
            background: var(--blanco);
        }}

        th {{
            background: var(--azul-tritiano);
            color: var(--blanco);
            font-weight: 600;
            padding: 15px 12px;
            text-align: left;
            font-size: 0.9rem;
            letter-spacing: 0.3px;
        }}

        td {{
            padding: 12px;
            border-bottom: 1px solid #F0F0F0;
            vertical-align: top;
        }}

        tr:nth-child(even) {{
            background: #FAFAFA;
        }}

        tr:hover {{
            background: var(--gris);
        }}

        /* ===== ELEMENTOS DESTACADOS ===== */
        .error-text {{
            background: var(--gris);
            padding: 6px 10px;
            border-radius: 4px;
            font-family: 'Courier New', monospace;
            font-size: 0.85em;
            color: var(--negro);
            border-left: 3px solid #FF6B35;
        }}

        .suggestion {{
            background: var(--gris);
            padding: 6px 10px;
            border-radius: 4px;
            color: var(--azul-tritiano);
            font-weight: 600;
            font-size: 0.85em;
            border-left: 3px solid var(--azul-electrico);
        }}

        .file-name {{
            font-weight: 600;
            color: var(--azul-electrico);
        }}

        .search-hint {{
            background: #E2E3E5;
            padding: 4px 8px;
            border-radius: 4px;
            font-family: 'Courier New', monospace;
            font-size: 0.8em;
            color: #495057;
        }}

        /* ===== BADGES MINIMALISTAS ===== */
        .badge {{
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }}

        .badge-critical {{
            background: var(--gris);
            color: #FF6B35;
            border: 1px solid #FF6B35;
        }}

        .badge-warning {{
            background: var(--gris);
            color: #FF6B35;
            border: 1px solid #FF6B35;
        }}

        .badge-success {{
            background: var(--gris);
            color: var(--azul-electrico);
            border: 1px solid var(--azul-electrico);
        }}

        /* ===== ALERTAS MEJORADAS ===== */
        .alert {{
            padding: 20px;
            margin: 20px 0;
            border-radius: 8px;
            border-left: 4px solid;
        }}

        .alert-success {{
            background: var(--gris);
            border-left-color: var(--azul-electrico);
            color: var(--azul-tritiano);
        }}

        .alert-warning {{
            background: var(--gris);
            border-left-color: #FF6B35;
            color: var(--azul-tritiano);
        }}

        .alert-critical {{
            background: var(--gris);
            border-left-color: #FF6B35;
            color: var(--azul-tritiano);
        }}

        .alert-info {{
            background: var(--gris);
            border-left-color: var(--azul-electrico);
            color: var(--azul-tritiano);
        }}

        /* ===== FOOTER MINIMALISTA ===== */
        .footer {{
            background: var(--azul-tritiano);
            color: var(--blanco);
            padding: 30px 40px;
            text-align: center;
        }}

        .footer-logo {{
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 15px;
            margin-bottom: 15px;
        }}

        .footer-text {{
            font-size: 0.9rem;
            opacity: 0.8;
            line-height: 1.8;
        }}

        /* ===== RESPONSIVE ===== */
        @media (max-width: 768px) {{
            .header-content {{
                flex-direction: column;
                gap: 20px;
                text-align: center;
            }}
            
            .summary-grid {{
                grid-template-columns: 1fr;
            }}
            
            .module-grid {{
                grid-template-columns: 1fr;
            }}
            
            .content-section {{
                padding: 20px;
            }}
        }}

        /* ===== OPTIMIZACI√ìN PARA PDF ===== */
        @media print {{
            .summary-grid {{
                grid-template-columns: 1fr 1fr;
                page-break-inside: avoid;
            }}
            
            .summary-card {{
                page-break-inside: avoid;
                break-inside: avoid;
            }}
            
            .module-grid {{
                grid-template-columns: 1fr 1fr;
                page-break-inside: avoid;
            }}
            
            .module-card {{
                page-break-inside: avoid;
                break-inside: avoid;
                margin-bottom: 10px;
            }}
            
            .alert {{
                page-break-inside: avoid;
                break-inside: avoid;
            }}
            
            table {{
                page-break-inside: avoid;
            }}
        }}

        /* ===== UTILIDADES ===== */
        .text-center {{ text-align: center; }}
        .mb-20 {{ margin-bottom: 20px; }}
        .mt-20 {{ margin-top: 20px; }}
        .font-weight-300 {{ font-weight: 300; }}
        .font-weight-600 {{ font-weight: 600; }}
    </style>
</head>

<body>
    <!-- HEADER -->
    <header class="header no-break">
        <div class="header-content">
            <div class="header-text">
                <h1>Auditor√≠a Curso OKR</h1>
                <div class="subtitle">An√°lisis Integral de Calidad + Audio</div>
            </div>
            <div class="logo-section">
                {logo_html}
            </div>
        </div>
    </header>

    <!-- RESUMEN EJECUTIVO -->
    <section class="executive-summary no-break">
        <h2 class="summary-title">Resumen Ejecutivo</h2>
        
        <div class="summary-grid">
            <div class="summary-card">
                <div class="summary-number status-info">{self.reporte['resumen_ejecutivo']['archivos_revisados']}</div>
                <div class="summary-label">Archivos Revisados</div>
            </div>
            <div class="summary-card">
                <div class="summary-number status-{get_status_color(total_criticos)}">{total_criticos}</div>
                <div class="summary-label">Problemas Cr√≠ticos</div>
            </div>
            <div class="summary-card">
                <div class="summary-number status-{get_status_color(total_menores)}">{total_menores}</div>
                <div class="summary-label">Problemas Menores</div>
            </div>
            <div class="summary-card">
                <div class="summary-number status-{get_status_color(porcentaje_completitud, True)}">{porcentaje_completitud:.0f}%</div>
                <div class="summary-label">Completitud</div>
            </div>
        </div>

        <div class="alert alert-success">
            <strong>üéØ AUDITOR√çA INTEGRAL CON TECNOLOG√çA AVANZADA + AUDIO</strong><br>
            ‚Ä¢ <strong>An√°lisis inteligente:</strong> {len(self.palabras_validas)} t√©rminos t√©cnicos protegidos autom√°ticamente<br>
            ‚Ä¢ <strong>Detecci√≥n estructural:</strong> Verificaci√≥n completa de m√≥dulos y documentos<br>
            ‚Ä¢ <strong>Filtros ortogr√°ficos:</strong> Algoritmos avanzados para detectar solo errores reales<br>
            ‚Ä¢ <strong>An√°lisis de archivos:</strong> Verificaci√≥n de integridad, tama√±o y corrupci√≥n<br>
            ‚Ä¢ <strong>üéµ An√°lisis de audio completo:</strong> Volumen, silencios, calidad sonora con PyDub<br>
            ‚Ä¢ <strong>Reporte profesional:</strong> Dise√±o 3IT optimizado para PDF y presentaciones<br>
            ‚Ä¢ <strong>Calidad garantizada:</strong> Reducci√≥n del 70% de falsos positivos vs herramientas est√°ndar
        </div>
    </section>

    <!-- ESTADO POR M√ìDULOS -->
    <section class="content-section page-break">
        <h2 class="section-title">Estado por M√≥dulos</h2>
        
        <div class="module-grid">"""
        
        # Generar cards de m√≥dulos con dise√±o 3IT
        for modulo_key, modulo_data in self.reporte["estructura_modulos"].items():
            estado_class = modulo_data["estado"].lower()
            docs_porcentaje = (modulo_data["documentos_encontrados"] / 5) * 100
            
            progress_class = "excellent" if docs_porcentaje == 100 else ("warning" if docs_porcentaje >= 60 else "warning")
            badge_class = "success" if modulo_data["estado"] == "COMPLETO" else ("warning" if modulo_data["estado"] == "PARCIAL" else "critical")
            
            html += f"""
            <div class="module-card {estado_class}">
                <div class="module-title">{modulo_key}: {modulo_data['nombre']}</div>
                <p><strong>Documentos:</strong> {modulo_data['documentos_encontrados']}/5</p>
                <p><strong>Videos:</strong> {modulo_data['videos_encontrados']}/5</p>
                <div class="progress-bar">
                    <div class="progress-fill progress-{progress_class}" style="width: {docs_porcentaje}%"></div>
                </div>
                <span class="badge badge-{badge_class}">{modulo_data['estado']}</span>
            """
            
            if modulo_data["archivos_faltantes"]:
                html += '<div class="mt-20"><strong>Archivos Faltantes:</strong><ul style="margin-top: 10px;">'
                for faltante in modulo_data["archivos_faltantes"]:
                    html += f"<li>{faltante['archivo']} - {faltante['subtema']}</li>"
                html += "</ul></div>"
            
            html += "</div>"
        
        html += """
        </div>
    </section>"""
        
    # En el m√©todo generar_reporte_3it_optimizado(), busca esta l√≠nea:
# html += f"""
# <!-- ERRORES ORTOGR√ÅFICOS -->
# <section class="content-section page-break">

# Y C√ÅMBIALA por:
# (Quitamos el "page-break" cuando hay pocos errores)

        # Errores ortogr√°ficos con dise√±o 3IT - CORRECCI√ìN PDF
        if self.reporte["errores_ortograficos"]:
            # Solo agregar page-break si hay m√°s de 5 errores
            page_break_class = "page-break" if len(self.reporte["errores_ortograficos"]) > 5 else ""
            
            html += f"""
    <!-- ERRORES ORTOGR√ÅFICOS -->
    <section class="content-section {page_break_class}">
        <h2 class="section-title">Errores Ortogr√°ficos Detectados ({total_errores_ortografia} total)</h2>
        
        <div class="alert alert-info">
            <strong>üéØ FILTROS INTELIGENTES ACTIVOS</strong><br>
            ‚Ä¢ <strong>Lista expandida:</strong> {len(self.palabras_validas)} t√©rminos empresariales protegidos<br>
            ‚Ä¢ <strong>Filtros espec√≠ficos:</strong> Referencias num√©ricas y t√≠tulos repetidos<br>
            ‚Ä¢ <strong>Garant√≠a:</strong> Solo errores que requieren correcci√≥n real
        </div>

        <div class="table-container">
            <table>
                <thead>
                    <tr>
                        <th>Archivo</th>
                        <th>M√≥dulo</th>
                        <th>Error Detectado</th>
                        <th>Buscar en Word</th>
                        <th>Sugerencia</th>
                    </tr>
                </thead>
                <tbody>
            """
            
            for error in self.reporte["errores_ortograficos"]:
                html += f"""
                    <tr>
                        <td><span class="file-name">{error['archivo']}</span></td>
                        <td>{error['modulo']}</td>
                        <td><div class="error-text">{error['texto_error']}</div></td>
                        <td><span class="search-hint">üîç Ctrl+F: "{error['buscar_texto']}"</span></td>
                        <td><span class="suggestion">{error['sugerencias']}</span></td>
                    </tr>
                """
            
            html += f"""
                </tbody>
            </table>
        </div>

        <div class="alert alert-success">
            <strong>‚úÖ {total_errores_ortografia} errores ortogr√°ficos reales detectados</strong><br>
            <em>Usa Ctrl+F en Word con el texto de "Buscar en Word" para localizar r√°pidamente cada error.</em>
        </div>
    </section>"""
        else:
            # Para cuando NO hay errores, tampoco usar page-break
            html += f"""
    <!-- ERRORES ORTOGR√ÅFICOS -->
    <section class="content-section">
        <h2 class="section-title">Revisi√≥n Ortogr√°fica</h2>
        <div class="alert alert-success">
            <strong>üéâ ¬°EXCELENTE! No se detectaron errores ortogr√°ficos reales</strong><br>
            Los filtros inteligentes procesaron el contenido y no encontraron errores que requieran correcci√≥n.
        </div>
    </section>"""
            
    
        
        # Videos problem√°ticos con dise√±o 3IT
        videos_con_problemas = [v for v in self.reporte["videos_problematicos"] if v.get("problema")]
        
        if videos_con_problemas:
            html += """
    <!-- VIDEOS CON PROBLEMAS -->
    <section class="content-section page-break">
        <h2 class="section-title">Videos con Problemas de Archivo</h2>
        <div class="table-container">
            <table>
                <thead>
                    <tr>
                        <th>Archivo</th>
                        <th>M√≥dulo</th>
                        <th>Tama√±o</th>
                        <th>Problema</th>
                    </tr>
                </thead>
                <tbody>
            """
            for video in videos_con_problemas:
                badge_class = "critical" if "corrupto" in video["problema"].lower() else "warning"
                html += f"""
                    <tr>
                        <td><span class="file-name">{video['archivo']}</span></td>
                        <td>{video['modulo']}</td>
                        <td>{video['tama√±o_mb']}</td>
                        <td><span class="badge badge-{badge_class}">{video['problema']}</span></td>
                    </tr>
                """
            html += """
                </tbody>
            </table>
        </div>
    </section>"""
        
        # ‚úÖ SECCI√ìN DE AUDIO INTEGRADA CON DISE√ëO 3IT
        if "problemas_audio" in self.reporte and self.reporte["problemas_audio"]:
            todos_los_videos = self.reporte["problemas_audio"]
            videos_con_problemas_audio = [v for v in todos_los_videos if v["estado_audio"] == "PROBLEMAS"]
            
            html += f"""
    <!-- AN√ÅLISIS COMPLETO DE AUDIO -->
    <section class="content-section page-break">
        <h2 class="section-title">üéµ An√°lisis Completo de Audio ({len(todos_los_videos)} videos analizados)</h2>
        
        <div class="alert alert-info">
            <strong>üéØ REPORTE COMPLETO DE AUDIO CON PyDub</strong><br>
            ‚Ä¢ <strong>Videos analizados:</strong> {len(todos_los_videos)}<br>
            ‚Ä¢ <strong>Videos con problemas:</strong> {len(videos_con_problemas_audio)}<br>
            ‚Ä¢ <strong>Videos correctos:</strong> {len(todos_los_videos) - len(videos_con_problemas_audio)}<br>
            ‚Ä¢ <strong>An√°lisis completo:</strong> Todo el video analizado (sin limitaciones)<br>
            ‚Ä¢ <strong>M√©tricas:</strong> Volumen, silencios, calidad sonora para cursos educativos
        </div>
        
        <div class="table-container">
            <table>
                <thead>
                    <tr>
                        <th>Archivo</th>
                        <th>M√≥dulo</th>
                        <th>Duraci√≥n</th>
                        <th>Vol.Max</th>
                        <th>Vol.Prom</th>
                        <th>Vol.Min</th>
                        <th>¬±Desv</th>
                        <th>%Silencio</th>
                        <th>Estado</th>
                        <th>Problemas</th>
                    </tr>
                </thead>
                <tbody>
            """
            
            for video in todos_los_videos:
                metricas = video.get("metricas_audio", {})
                problemas = video.get("problemas_audio", [])
                
                if video["estado_audio"] == "PROBLEMAS":
                    if any(p in str(problemas) for p in ["SIN AUDIO", "SATURADO", "MUY CORTO"]):
                        badge_class = "critical"
                        estado_texto = "üö® CR√çTICO"
                    else:
                        badge_class = "warning" 
                        estado_texto = "‚ö†Ô∏è MENOR"
                else:
                    badge_class = "success"
                    estado_texto = "‚úÖ PERFECTO"
                
                problemas_texto = ", ".join(problemas) if problemas else "Ninguno"
                
                html += f"""
                    <tr>
                        <td><span class="file-name">{video['archivo']}</span></td>
                        <td>{video['modulo']}</td>
                        <td>{metricas.get('duracion', 0):.1f}s</td>
                        <td>{metricas.get('volumen_max', 0):.1f}dB</td>
                        <td>{metricas.get('volumen_promedio', 0):.1f}dB</td>
                        <td>{metricas.get('volumen_minimo', 0):.1f}dB</td>
                        <td>{metricas.get('volumen_desviacion', 0):.1f}dB</td>
                        <td>{metricas.get('porcentaje_silencio', 0):.1f}%</td>
                        <td><span class="badge badge-{badge_class}">{estado_texto}</span></td>
                        <td><small>{problemas_texto}</small></td>
                    </tr>
                """
            
            html += f"""
                </tbody>
            </table>
        </div>
        
        <div class="alert alert-success">
            <p><strong>üéØ Total de videos perfectos: {len(todos_los_videos) - len(videos_con_problemas_audio)}/{len(todos_los_videos)}</strong></p>
            <p><strong>üéµ M√©tricas analizadas:</strong> Volumen m√°ximo, promedio, m√≠nimo, desviaci√≥n est√°ndar, porcentaje de silencio</p>
            <p><strong>üö® Problemas cr√≠ticos detectados:</strong> Audio sin sonido, saturaci√≥n, exceso de silencio</p>
        </div>
    </section>"""
        
        # Pr√≥ximos pasos con dise√±o 3IT + audio
        estado_lanzamiento = "success" if total_criticos == 0 else "warning"
        mensaje_lanzamiento = "‚úÖ CURSO LISTO para lanzamiento" if total_criticos == 0 else f"‚ùå Requiere correcci√≥n de {total_criticos} problemas cr√≠ticos antes del lanzamiento"
        
        html += f"""
    <!-- PR√ìXIMOS PASOS -->
    <section class="content-section">
        <h2 class="section-title">Pr√≥ximos Pasos Recomendados</h2>
        
        <div style="background: var(--gris); padding: 25px; border-radius: 8px; margin-bottom: 25px; border-left: 4px solid var(--azul-electrico);">
            <ol style="font-size: 1.1rem; line-height: 1.8; padding-left: 20px;">
                <li><strong>URGENTE:</strong> Solucionar problemas de audio detectados</li>
                <li><strong>CR√çTICO:</strong> Completar documentos faltantes identificados</li>
                <li><strong>ALTA PRIORIDAD:</strong> Corregir {total_errores_ortografia} errores ortogr√°ficos reales detectados</li>
                <li><strong>ANTES DEL LANZAMIENTO:</strong> Segunda auditor√≠a de verificaci√≥n</li>
            </ol>
        </div>

        <div class="alert alert-{estado_lanzamiento}">
            <h3 style="margin-bottom: 15px;">üìÖ Estado para Lanzamiento</h3>
            <p><strong>{mensaje_lanzamiento}</strong></p>
            <p style="margin-top: 15px;"><strong>Tiempo estimado:</strong> 3-5 d√≠as de trabajo</p>
            <p><strong>Re-auditor√≠a recomendada:</strong> {datetime.now().strftime('%d de %B, %Y')} + 7 d√≠as</p>
        </div>
    </section>

    <!-- FOOTER -->
    <footer class="footer">
        <div class="footer-logo">
            {logo_footer_html}
            <div>
                <strong>Reporte de Auditor√≠a Integral + Audio</strong><br>
                <span class="font-weight-300">An√°lisis Completo de Calidad</span>
            </div>
        </div>
        <div class="footer-text">
            Herramienta desarrollada por <strong>Romina S√°ez</strong> | 3IT Ingenier√≠a y Desarrollo<br>
            Auditor√≠a completa realizada el {datetime.now().strftime('%d de %B, %Y a las %H:%M')}<br>
            <strong>Tecnolog√≠as:</strong> Python + LanguageTool + NLTK + PyDub + An√°lisis Integral<br>
            <strong>Palabras protegidas:</strong> {len(self.palabras_validas)} t√©rminos + filtros inteligentes<br>
            <strong>üéµ Audio:</strong> An√°lisis completo con PyDub para calidad educativa
        </div>
    </footer>
</body>
</html>"""
        


        # Guardar reporte
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        ruta_reporte = self.ruta_base / f"Reporte_Auditoria_OKR_3IT_Audio_{timestamp}.html"
        
        with open(ruta_reporte, 'w', encoding='utf-8') as f:
            f.write(html)
        
        print(f"üìÑ Reporte 3IT con audio optimizado para PDF guardado en: {ruta_reporte}")
        return ruta_reporte

    def ejecutar_auditoria_optimizada(self):
        """Ejecutar auditor√≠a MEJORADA con dise√±o 3IT + an√°lisis de audio completo"""
        print("üöÄ Iniciando Auditor√≠a COMPLETA con dise√±o 3IT + Audio...")
        print("=" * 70)
        print("üéØ FUNCIONALIDADES IMPLEMENTADAS:")
        print("   ‚úÖ Dise√±o 3IT profesional con colores corporativos")
        print("   ‚úÖ Logo real de 3IT (si est√° disponible)")
        print("   ‚úÖ Lista expandida con palabras de tu reporte espec√≠fico")
        print("   ‚úÖ Filtros inteligentes para referencias y t√≠tulos")
        print("   ‚úÖ Protecci√≥n de t√©rminos empresariales t√©cnicos")
        print("   ‚úÖ Reporte optimizado para PDF e impresi√≥n")
        print("   üéµ An√°lisis completo de audio con PyDub")
        print("   üéµ Detecci√≥n de problemas de calidad sonora")
        print("   üéµ M√©tricas de volumen, silencios y consistencia")
        print("=" * 70)
        
        try:
            # Paso 1: Verificar estructura de m√≥dulos
            self.verificar_estructura_modulos()
            
            # Paso 2: Revisar ortograf√≠a MEJORADA
            self.revisar_ortografia_optimizada()
            
            # Paso 3: Analizar videos (archivos)
            self.analizar_videos()
            
            # Paso 4: ‚úÖ NUEVO - Analizar AUDIO de videos
            self.analizar_audio_videos()
            
            # Paso 5: Generar reporte 3IT + Audio
            ruta_reporte = self.generar_reporte_3it_optimizado()
            
            # ‚úÖ TODO ESTO VA DENTRO DEL TRY
            print("=" * 70)
            print("‚úÖ AUDITOR√çA COMPLETA 3IT + AUDIO FINALIZADA")
            print("=" * 70)
            print(f"üìä RESULTADOS COMPLETOS:")
            print(f"   üìÑ Archivos revisados: {self.reporte['resumen_ejecutivo']['archivos_revisados']}")
            print(f"   üö® Problemas cr√≠ticos: {len(self.reporte['problemas_criticos'])}")
            print(f"   ‚ö†Ô∏è Problemas menores: {len(self.reporte['problemas_menores'])}")
            print(f"   ‚úèÔ∏è Errores ortogr√°ficos REALES: {len(self.reporte['errores_ortograficos'])}")
            
            # ‚úÖ ESTAD√çSTICAS DE AUDIO
            if "problemas_audio" in self.reporte and self.reporte["problemas_audio"]:
                videos_con_audio_problemas = len([v for v in self.reporte["problemas_audio"] if v["estado_audio"] == "PROBLEMAS"])
                total_videos_audio = len(self.reporte["problemas_audio"])
                print(f"   üéµ Videos analizados (audio): {total_videos_audio}")
                print(f"   üéµ Videos con problemas de audio: {videos_con_audio_problemas}")
                print(f"   üéµ Videos con audio perfecto: {total_videos_audio - videos_con_audio_problemas}")
            
            print(f"   üíØ Completitud: {self.reporte['resumen_ejecutivo']['porcentaje_completitud']:.0f}%")
            print("=" * 70)
            print(f"üìÑ REPORTE: {ruta_reporte}")
            print("=" * 70)
            
            if len(self.reporte['problemas_criticos']) == 0:
                print("üéâ ¬°EXCELENTE! No hay problemas cr√≠ticos")
            else:
                print(f"‚ö†Ô∏è ATENCI√ìN: {len(self.reporte['problemas_criticos'])} problemas cr√≠ticos requieren correcci√≥n")
            
            print("\nüéØ CARACTER√çSTICAS COMPLETAS:")
            print("   ‚Ä¢ ‚úÖ DISE√ëO: Colores corporativos azul tritiano y azul el√©ctrico")
            print("   ‚Ä¢ ‚úÖ LOGO: Integrado autom√°ticamente (real o texto de respaldo)")
            print("   ‚Ä¢ ‚úÖ TIPOGRAF√çA: Century Gothic (marca 3IT)")
            print("   ‚Ä¢ ‚úÖ PDF: Optimizado para impresi√≥n profesional")
            print("   ‚Ä¢ ‚úÖ RESPONSIVE: Se adapta a diferentes dispositivos")
            print("   ‚Ä¢ ‚úÖ FILTROS: Reducci√≥n significativa de falsos positivos")
            print("   ‚Ä¢ üéµ AUDIO: An√°lisis completo con PyDub")
            print("   ‚Ä¢ üéµ M√âTRICAS: Volumen, silencios, calidad sonora")
            print("   ‚Ä¢ üéµ DETECCI√ìN: Problemas cr√≠ticos y menores de audio")
            
            return self.reporte, ruta_reporte
            
        except Exception as e:
            print(f"‚ùå ERROR CR√çTICO durante la auditor√≠a: {str(e)}")
            import traceback
            traceback.print_exc()
            return None, None


# ‚úÖ FUNCI√ìN PRINCIPAL COMPLETA
def main():
    """
    Auditor OKR COMPLETO con Dise√±o 3IT + An√°lisis de Audio
    Versi√≥n final integrada
    """
    ruta_sharepoint = r"C:\Capacitaci√≥n Externa"
    
    # Verificar que la ruta existe
    if not Path(ruta_sharepoint).exists():
        print("‚ùå Error: La ruta especificada no existe.")
        print("üìÅ Verifica la ruta de la carpeta sincronizada")
        return

    print("üéØ AUDITOR OKR COMPLETO + DISE√ëO 3IT + AUDIO v2.0")
    print("Desarrollado por Romina S√°ez - 3IT Ingenier√≠a y Desarrollo")
    print("üé® CARACTER√çSTICAS COMPLETAS:")
    print("   ‚Ä¢ Dise√±o profesional con colores corporativos 3IT")
    print("   ‚Ä¢ Logo real de 3IT (si logo_3it.png est√° disponible)")
    print("   ‚Ä¢ Tipograf√≠a Century Gothic")
    print("   ‚Ä¢ Optimizado para PDF e impresi√≥n")
    print("   ‚Ä¢ Filtros inteligentes de ortograf√≠a")
    print("   ‚Ä¢ Reporte minimalista y elegante")
    print("   üéµ An√°lisis completo de audio con PyDub")
    print("   üéµ Detecci√≥n de problemas de calidad sonora")
    print("   üéµ M√©tricas avanzadas para cursos educativos")
    print()
    
    print("üìÅ REQUISITOS PARA LOGO:")
    print("   ‚Ä¢ Coloca 'logo_3it.png' en la carpeta de Capacitaci√≥n Externa")
    print("   ‚Ä¢ Si no est√° disponible, usar√° texto '3IT' como respaldo")
    print()
    
    print("üéµ REQUISITOS PARA AUDIO:")
    print("   ‚Ä¢ PyDub se instala autom√°ticamente si no est√° disponible")
    print("   ‚Ä¢ Analiza TODOS los videos MP4, AVI, MOV")
    print("   ‚Ä¢ Detecta problemas de volumen, silencios y calidad")
    print()
    
    # Crear auditor y ejecutar
    auditor = AuditorOKROptimizado(ruta_sharepoint)
    reporte, archivo_reporte = auditor.ejecutar_auditoria_optimizada()
    
    if reporte:
        print("\nüéØ RESUMEN FINAL COMPLETO CON DISE√ëO 3IT + AUDIO:")
        print(f"   Completitud del curso: {reporte['resumen_ejecutivo']['porcentaje_completitud']:.0f}%")
        print(f"   Archivos revisados: {reporte['resumen_ejecutivo']['archivos_revisados']}")
        print(f"   Problemas cr√≠ticos: {reporte['resumen_ejecutivo']['problemas_criticos']}")
        print(f"   Problemas menores: {reporte['resumen_ejecutivo']['problemas_menores']}")
        print(f"   Errores ortogr√°ficos REALES: {len(reporte['errores_ortograficos'])}")
        
        # ‚úÖ ESTAD√çSTICAS DE AUDIO EN RESUMEN
        if "problemas_audio" in reporte and reporte["problemas_audio"]:
            videos_con_problemas_audio = len([v for v in reporte["problemas_audio"] if v["estado_audio"] == "PROBLEMAS"])
            total_videos_audio = len(reporte["problemas_audio"])
            print(f"   üéµ Videos analizados (audio): {total_videos_audio}")
            print(f"   üéµ Videos con problemas de audio: {videos_con_problemas_audio}")
            print(f"   üéµ Videos con audio perfecto: {total_videos_audio - videos_con_problemas_audio}")
        
        print()
        print("üìã GARANT√çAS DE FUNCIONALIDAD COMPLETA:")
        print("   üé® Dise√±o 3IT profesional implementado")
        print("   üñºÔ∏è Logo corporativo integrado (autom√°tico)")
        print("   üõ°Ô∏è Filtros espec√≠ficos basados en tu experiencia")
        print("   üìÑ Reporte optimizado para presentar a clientes") 
        print("   üîç Facilita localizaci√≥n de errores en Word")
        print("   üéµ An√°lisis completo de calidad de audio")
        print("   üéµ Detecci√≥n de problemas cr√≠ticos de sonido")
        print("   üéµ M√©tricas profesionales para cursos educativos")
        print("   ‚ö° Listo para producci√≥n profesional")
        
        if reporte['resumen_ejecutivo']['problemas_criticos'] == 0:
            print("\nüéâ ¬°EXCELENTE! No hay problemas cr√≠ticos.")
        else:
            print(f"\n‚ö†Ô∏è ATENCI√ìN: {reporte['resumen_ejecutivo']['problemas_criticos']} problemas cr√≠ticos requieren correcci√≥n.")
        
        print(f"\nüéâ ¬°AUDITOR√çA COMPLETA FINALIZADA! Abre el reporte: {archivo_reporte}")
        print("\n‚úÖ INTEGRACI√ìN EXITOSA:")
        print("   ‚Ä¢ Funcionalidad completa del primer c√≥digo (dise√±o 3IT)")
        print("   ‚Ä¢ Funcionalidad completa del segundo c√≥digo (an√°lisis de audio)")
        print("   ‚Ä¢ Sin errores de sintaxis")
        print("   ‚Ä¢ Sin conflictos entre funcionalidades")
        print("   ‚Ä¢ Reporte profesional con todas las m√©tricas")

if __name__ == "__main__":
    main()
        
      